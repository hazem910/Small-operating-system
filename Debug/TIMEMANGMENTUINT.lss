
TIMEMANGMENTUINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009aa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000009aa  00000a3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800062  00800062  00000a40  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a40  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a70  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012be  00000000  00000000  00000bcc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a02  00000000  00000000  00001e8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001276  00000000  00000000  0000288c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00003b04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e5e  00000000  00000000  00003d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d6e  00000000  00000000  00007b82  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  000088f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000125b  00000000  00000000  000089e0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	30 c0       	rjmp	.+96     	; 0x62 <__ctors_end>
   2:	00 00       	nop
   4:	49 c0       	rjmp	.+146    	; 0x98 <__bad_interrupt>
   6:	00 00       	nop
   8:	47 c0       	rjmp	.+142    	; 0x98 <__bad_interrupt>
   a:	00 00       	nop
   c:	45 c0       	rjmp	.+138    	; 0x98 <__bad_interrupt>
   e:	00 00       	nop
  10:	43 c0       	rjmp	.+134    	; 0x98 <__bad_interrupt>
  12:	00 00       	nop
  14:	41 c0       	rjmp	.+130    	; 0x98 <__bad_interrupt>
  16:	00 00       	nop
  18:	3f c0       	rjmp	.+126    	; 0x98 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3d c0       	rjmp	.+122    	; 0x98 <__bad_interrupt>
  1e:	00 00       	nop
  20:	3b c0       	rjmp	.+118    	; 0x98 <__bad_interrupt>
  22:	00 00       	nop
  24:	39 c0       	rjmp	.+114    	; 0x98 <__bad_interrupt>
  26:	00 00       	nop
  28:	37 c0       	rjmp	.+110    	; 0x98 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	91 c4       	rjmp	.+2338   	; 0x950 <__vector_11>
  2e:	00 00       	nop
  30:	33 c0       	rjmp	.+102    	; 0x98 <__bad_interrupt>
  32:	00 00       	nop
  34:	31 c0       	rjmp	.+98     	; 0x98 <__bad_interrupt>
  36:	00 00       	nop
  38:	2f c0       	rjmp	.+94     	; 0x98 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2d c0       	rjmp	.+90     	; 0x98 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2b c0       	rjmp	.+86     	; 0x98 <__bad_interrupt>
  42:	00 00       	nop
  44:	29 c0       	rjmp	.+82     	; 0x98 <__bad_interrupt>
  46:	00 00       	nop
  48:	27 c0       	rjmp	.+78     	; 0x98 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	25 c0       	rjmp	.+74     	; 0x98 <__bad_interrupt>
  4e:	00 00       	nop
  50:	23 c0       	rjmp	.+70     	; 0x98 <__bad_interrupt>
  52:	00 00       	nop
  54:	f3 03       	fmuls	r23, r19
  56:	fe 03       	fmulsu	r23, r22
  58:	09 04       	cpc	r0, r9
  5a:	14 04       	cpc	r1, r4
  5c:	1f 04       	cpc	r1, r15
  5e:	2a 04       	cpc	r2, r10
  60:	35 04       	cpc	r3, r5

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	ea ea       	ldi	r30, 0xAA	; 170
  76:	f9 e0       	ldi	r31, 0x09	; 9
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a2 36       	cpi	r26, 0x62	; 98
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a2 e6       	ldi	r26, 0x62	; 98
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	ae 38       	cpi	r26, 0x8E	; 142
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	08 d2       	rcall	.+1040   	; 0x4a6 <main>
  96:	87 c4       	rjmp	.+2318   	; 0x9a6 <_exit>

00000098 <__bad_interrupt>:
  98:	b3 cf       	rjmp	.-154    	; 0x0 <__vectors>

0000009a <DIO_init>:
            break;
   }

   
   return ERROR;
}
  9a:	fc 01       	movw	r30, r24
  9c:	89 2b       	or	r24, r25
  9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_init+0x8>
  a0:	51 c0       	rjmp	.+162    	; 0x144 <DIO_init+0xaa>
  a2:	80 81       	ld	r24, Z
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	c1 f0       	breq	.+48     	; 0xd8 <DIO_init+0x3e>
  a8:	28 f0       	brcs	.+10     	; 0xb4 <DIO_init+0x1a>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	39 f1       	breq	.+78     	; 0xfc <DIO_init+0x62>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	b9 f1       	breq	.+110    	; 0x120 <DIO_init+0x86>
  b2:	4a c0       	rjmp	.+148    	; 0x148 <DIO_init+0xae>
  b4:	82 81       	ldd	r24, Z+2	; 0x02
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	31 f4       	brne	.+12     	; 0xc6 <DIO_init+0x2c>
  ba:	9a b3       	in	r25, 0x1a	; 26
  bc:	81 81       	ldd	r24, Z+1	; 0x01
  be:	89 2b       	or	r24, r25
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	08 95       	ret
  c6:	81 11       	cpse	r24, r1
  c8:	41 c0       	rjmp	.+130    	; 0x14c <DIO_init+0xb2>
  ca:	9a b3       	in	r25, 0x1a	; 26
  cc:	81 81       	ldd	r24, Z+1	; 0x01
  ce:	80 95       	com	r24
  d0:	89 23       	and	r24, r25
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
  d8:	82 81       	ldd	r24, Z+2	; 0x02
  da:	8f 3f       	cpi	r24, 0xFF	; 255
  dc:	31 f4       	brne	.+12     	; 0xea <DIO_init+0x50>
  de:	97 b3       	in	r25, 0x17	; 23
  e0:	81 81       	ldd	r24, Z+1	; 0x01
  e2:	89 2b       	or	r24, r25
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret
  ea:	81 11       	cpse	r24, r1
  ec:	31 c0       	rjmp	.+98     	; 0x150 <DIO_init+0xb6>
  ee:	97 b3       	in	r25, 0x17	; 23
  f0:	81 81       	ldd	r24, Z+1	; 0x01
  f2:	80 95       	com	r24
  f4:	89 23       	and	r24, r25
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	08 95       	ret
  fc:	82 81       	ldd	r24, Z+2	; 0x02
  fe:	8f 3f       	cpi	r24, 0xFF	; 255
 100:	31 f4       	brne	.+12     	; 0x10e <DIO_init+0x74>
 102:	94 b3       	in	r25, 0x14	; 20
 104:	81 81       	ldd	r24, Z+1	; 0x01
 106:	89 2b       	or	r24, r25
 108:	84 bb       	out	0x14, r24	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret
 10e:	81 11       	cpse	r24, r1
 110:	21 c0       	rjmp	.+66     	; 0x154 <DIO_init+0xba>
 112:	94 b3       	in	r25, 0x14	; 20
 114:	81 81       	ldd	r24, Z+1	; 0x01
 116:	80 95       	com	r24
 118:	89 23       	and	r24, r25
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret
 120:	82 81       	ldd	r24, Z+2	; 0x02
 122:	8f 3f       	cpi	r24, 0xFF	; 255
 124:	31 f4       	brne	.+12     	; 0x132 <DIO_init+0x98>
 126:	91 b3       	in	r25, 0x11	; 17
 128:	81 81       	ldd	r24, Z+1	; 0x01
 12a:	89 2b       	or	r24, r25
 12c:	81 bb       	out	0x11, r24	; 17
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
 132:	81 11       	cpse	r24, r1
 134:	11 c0       	rjmp	.+34     	; 0x158 <DIO_init+0xbe>
 136:	91 b3       	in	r25, 0x11	; 17
 138:	81 81       	ldd	r24, Z+1	; 0x01
 13a:	80 95       	com	r24
 13c:	89 23       	and	r24, r25
 13e:	81 bb       	out	0x11, r24	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 95       	ret
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 95       	ret
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret

0000015c <DIO_Write>:
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	a9 f0       	breq	.+42     	; 0x18a <DIO_Write+0x2e>
 160:	28 f0       	brcs	.+10     	; 0x16c <DIO_Write+0x10>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	09 f1       	breq	.+66     	; 0x1a8 <DIO_Write+0x4c>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	71 f1       	breq	.+92     	; 0x1c6 <DIO_Write+0x6a>
 16a:	3c c0       	rjmp	.+120    	; 0x1e4 <DIO_Write+0x88>
 16c:	4f 3f       	cpi	r20, 0xFF	; 255
 16e:	29 f4       	brne	.+10     	; 0x17a <DIO_Write+0x1e>
 170:	8b b3       	in	r24, 0x1b	; 27
 172:	68 2b       	or	r22, r24
 174:	6b bb       	out	0x1b, r22	; 27
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	08 95       	ret
 17a:	41 11       	cpse	r20, r1
 17c:	35 c0       	rjmp	.+106    	; 0x1e8 <DIO_Write+0x8c>
 17e:	8b b3       	in	r24, 0x1b	; 27
 180:	60 95       	com	r22
 182:	68 23       	and	r22, r24
 184:	6b bb       	out	0x1b, r22	; 27
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret
 18a:	4f 3f       	cpi	r20, 0xFF	; 255
 18c:	29 f4       	brne	.+10     	; 0x198 <DIO_Write+0x3c>
 18e:	88 b3       	in	r24, 0x18	; 24
 190:	68 2b       	or	r22, r24
 192:	68 bb       	out	0x18, r22	; 24
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	08 95       	ret
 198:	41 11       	cpse	r20, r1
 19a:	28 c0       	rjmp	.+80     	; 0x1ec <DIO_Write+0x90>
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	60 95       	com	r22
 1a0:	68 23       	and	r22, r24
 1a2:	68 bb       	out	0x18, r22	; 24
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
 1a8:	4f 3f       	cpi	r20, 0xFF	; 255
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <DIO_Write+0x5a>
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	68 2b       	or	r22, r24
 1b0:	65 bb       	out	0x15, r22	; 21
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	08 95       	ret
 1b6:	41 11       	cpse	r20, r1
 1b8:	1b c0       	rjmp	.+54     	; 0x1f0 <DIO_Write+0x94>
 1ba:	85 b3       	in	r24, 0x15	; 21
 1bc:	60 95       	com	r22
 1be:	68 23       	and	r22, r24
 1c0:	65 bb       	out	0x15, r22	; 21
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	08 95       	ret
 1c6:	4f 3f       	cpi	r20, 0xFF	; 255
 1c8:	29 f4       	brne	.+10     	; 0x1d4 <DIO_Write+0x78>
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	68 2b       	or	r22, r24
 1ce:	62 bb       	out	0x12, r22	; 18
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 95       	ret
 1d4:	41 11       	cpse	r20, r1
 1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <DIO_Write+0x98>
 1d8:	82 b3       	in	r24, 0x12	; 18
 1da:	60 95       	com	r22
 1dc:	68 23       	and	r22, r24
 1de:	62 bb       	out	0x12, r22	; 18
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 95       	ret
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	08 95       	ret
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret

000001f8 <DIO_Toggle>:
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
   
   switch (GPIO)
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	59 f0       	breq	.+22     	; 0x212 <DIO_Toggle+0x1a>
 1fc:	28 f0       	brcs	.+10     	; 0x208 <DIO_Toggle+0x10>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	69 f0       	breq	.+26     	; 0x21c <DIO_Toggle+0x24>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	81 f0       	breq	.+32     	; 0x226 <DIO_Toggle+0x2e>
 206:	14 c0       	rjmp	.+40     	; 0x230 <DIO_Toggle+0x38>
   {
      case GPIOA:
            PORTA_DATA^=pins;
 208:	8b b3       	in	r24, 0x1b	; 27
 20a:	68 27       	eor	r22, r24
 20c:	6b bb       	out	0x1b, r22	; 27
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 20e:	81 e0       	ldi	r24, 0x01	; 1
   
   switch (GPIO)
   {
      case GPIOA:
            PORTA_DATA^=pins;
            break;
 210:	08 95       	ret
      case GPIOB:
            PORTB_DATA^=pins;
 212:	88 b3       	in	r24, 0x18	; 24
 214:	68 27       	eor	r22, r24
 216:	68 bb       	out	0x18, r22	; 24
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 218:	81 e0       	ldi	r24, 0x01	; 1
      case GPIOA:
            PORTA_DATA^=pins;
            break;
      case GPIOB:
            PORTB_DATA^=pins;
            break;
 21a:	08 95       	ret
      case GPIOC:
           PORTC_DATA^=pins;
 21c:	85 b3       	in	r24, 0x15	; 21
 21e:	68 27       	eor	r22, r24
 220:	65 bb       	out	0x15, r22	; 21
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 222:	81 e0       	ldi	r24, 0x01	; 1
      case GPIOB:
            PORTB_DATA^=pins;
            break;
      case GPIOC:
           PORTC_DATA^=pins;
           break;
 224:	08 95       	ret
      case GPIOD:
          PORTD_DATA^=pins;
 226:	82 b3       	in	r24, 0x12	; 18
 228:	68 27       	eor	r22, r24
 22a:	62 bb       	out	0x12, r22	; 18
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 22c:	81 e0       	ldi	r24, 0x01	; 1
      case GPIOC:
           PORTC_DATA^=pins;
           break;
      case GPIOD:
          PORTD_DATA^=pins;
          break;
 22e:	08 95       	ret
      default:
          EROR=E_NOK;
 230:	80 e0       	ldi	r24, 0x00	; 0
   }


   return EROR;
   
 232:	08 95       	ret

00000234 <TMU_Init>:
Synchronous
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	00 d0       	rcall	.+0      	; 0x23a <TMU_Init+0x6>
 23a:	00 d0       	rcall	.+0      	; 0x23c <TMU_Init+0x8>
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
   EnmTMUError_t status =E_OK;
   if(ConfigPtr==NULL)
 240:	00 97       	sbiw	r24, 0x00	; 0
 242:	99 f1       	breq	.+102    	; 0x2aa <TMU_Init+0x76>
   {
      status =TMU_INIT_NULL_POINTER;
   }
   else
   {
      if(gu8_multiple_init==initialized)
 244:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <gu8_multiple_init>
 248:	21 30       	cpi	r18, 0x01	; 1
 24a:	89 f1       	breq	.+98     	; 0x2ae <TMU_Init+0x7a>
 24c:	fc 01       	movw	r30, r24
      {
         status=TMU_MULTIPLE_INIT;
      }         
       else
       {     gu8_multiple_init=initialized; 
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	20 93 77 00 	sts	0x0077, r18	; 0x800077 <gu8_multiple_init>
             g_res=ConfigPtr->RES;
            Timer_cfg_s instance={0};
 254:	19 82       	std	Y+1, r1	; 0x01
 256:	1a 82       	std	Y+2, r1	; 0x02
 258:	1b 82       	std	Y+3, r1	; 0x03
 25a:	1c 82       	std	Y+4, r1	; 0x04
            switch(ConfigPtr->TIMER_ID)
 25c:	81 81       	ldd	r24, Z+1	; 0x01
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	69 f0       	breq	.+26     	; 0x27c <TMU_Init+0x48>
 262:	18 f0       	brcs	.+6      	; 0x26a <TMU_Init+0x36>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	a1 f0       	breq	.+40     	; 0x290 <TMU_Init+0x5c>
 268:	1e c0       	rjmp	.+60     	; 0x2a6 <TMU_Init+0x72>
            {    
              case TIMER_0:
                     instance.Timer_CH=TIMER_0;
                     instance.Timer_Mode=TIMER_MODE;
                     instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	8b 83       	std	Y+3, r24	; 0x03
                     instance.Timer_Prescaler=TIMER_PRESCALER_64;
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	8c 83       	std	Y+4, r24	; 0x04
                     Timer_Init(&instance);
 272:	ce 01       	movw	r24, r28
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	47 d1       	rcall	.+654    	; 0x506 <Timer_Init>
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
   EnmTMUError_t status =E_OK;
 278:	81 e0       	ldi	r24, 0x01	; 1
                     instance.Timer_CH=TIMER_0;
                     instance.Timer_Mode=TIMER_MODE;
                     instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
                     instance.Timer_Prescaler=TIMER_PRESCALER_64;
                     Timer_Init(&instance);
                     break;
 27a:	1a c0       	rjmp	.+52     	; 0x2b0 <TMU_Init+0x7c>
               case TIMER_1:
                     instance.Timer_CH=TIMER_1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
                     instance.Timer_Mode=TIMER_MODE;
                     instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
 280:	8b 83       	std	Y+3, r24	; 0x03
                     instance.Timer_Prescaler=TIMER_PRESCALER_64;
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	8c 83       	std	Y+4, r24	; 0x04
                     Timer_Init(&instance);
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	3d d1       	rcall	.+634    	; 0x506 <Timer_Init>
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
   EnmTMUError_t status =E_OK;
 28c:	81 e0       	ldi	r24, 0x01	; 1
                     instance.Timer_CH=TIMER_1;
                     instance.Timer_Mode=TIMER_MODE;
                     instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
                     instance.Timer_Prescaler=TIMER_PRESCALER_64;
                     Timer_Init(&instance);
                     break;
 28e:	10 c0       	rjmp	.+32     	; 0x2b0 <TMU_Init+0x7c>
               case TIMER_2:
                      instance.Timer_CH=TIMER_2;
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	89 83       	std	Y+1, r24	; 0x01
                      instance.Timer_Mode=TIMER_MODE;
                      instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	8b 83       	std	Y+3, r24	; 0x03
                      instance.Timer_Prescaler=TIMER_PRESCALER_64;
 298:	84 e0       	ldi	r24, 0x04	; 4
 29a:	8c 83       	std	Y+4, r24	; 0x04
                      Timer_Init(&instance);
 29c:	ce 01       	movw	r24, r28
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	32 d1       	rcall	.+612    	; 0x506 <Timer_Init>
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
   EnmTMUError_t status =E_OK;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
                      instance.Timer_CH=TIMER_2;
                      instance.Timer_Mode=TIMER_MODE;
                      instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
                      instance.Timer_Prescaler=TIMER_PRESCALER_64;
                      Timer_Init(&instance);
                      break;
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <TMU_Init+0x7c>
               default:
                      status =E_NOK;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <TMU_Init+0x7c>
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
   EnmTMUError_t status =E_OK;
   if(ConfigPtr==NULL)
   {
      status =TMU_INIT_NULL_POINTER;
 2aa:	86 ef       	ldi	r24, 0xF6	; 246
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <TMU_Init+0x7c>
   }
   else
   {
      if(gu8_multiple_init==initialized)
      {
         status=TMU_MULTIPLE_INIT;
 2ae:	87 ef       	ldi	r24, 0xF7	; 247
                      break;
            }
          }                                                   
      }
   return status;
}
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <TMU_Start_Timer>:
Parameters (out):
Parameters (inOut):
Return:*/

EnmTMUError_t TMU_Start_Timer(uint16_t time,ptrtotask_CBK_FUNC ptrtofun,uint8_t periodicORoneshot)
{   EnmTMUError_t status=E_OK;
 2be:	9c 01       	movw	r18, r24
   if(gu8_multiple_init==not_init)
 2c0:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <gu8_multiple_init>
 2c4:	99 23       	and	r25, r25
 2c6:	19 f1       	breq	.+70     	; 0x30e <TMU_Start_Timer+0x50>
   {
      status=TMU_MODULE_NOT_INIT;
   }
else
{   
         if(gs_arraycount<BUFFER_SIZE)
 2c8:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gs_arraycount>
 2cc:	93 30       	cpi	r25, 0x03	; 3
 2ce:	08 f5       	brcc	.+66     	; 0x312 <TMU_Start_Timer+0x54>
         {
            if((periodicORoneshot!=PERIODIC)&&(periodicORoneshot!=ONESHOT))
 2d0:	42 30       	cpi	r20, 0x02	; 2
 2d2:	08 f5       	brcc	.+66     	; 0x316 <TMU_Start_Timer+0x58>
            {
               status=TMU_NOT_PERODICORONESHOT;
            }               
            else
            {
              if(ptrtofun==NULL)
 2d4:	61 15       	cp	r22, r1
 2d6:	71 05       	cpc	r23, r1
 2d8:	01 f1       	breq	.+64     	; 0x31a <TMU_Start_Timer+0x5c>
              {
                 status=TMU_FUN_NULL_POINTER;
              }
              else
              {
                    gstr_arrayoftasks[gs_arraycount].delay=time;
 2da:	87 e0       	ldi	r24, 0x07	; 7
 2dc:	98 9f       	mul	r25, r24
 2de:	f0 01       	movw	r30, r0
 2e0:	11 24       	eor	r1, r1
 2e2:	ee 59       	subi	r30, 0x9E	; 158
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	32 83       	std	Z+2, r19	; 0x02
 2e8:	21 83       	std	Z+1, r18	; 0x01
                    gstr_arrayoftasks[gs_arraycount].Ptrtotask=ptrtofun;
 2ea:	74 83       	std	Z+4, r23	; 0x04
 2ec:	63 83       	std	Z+3, r22	; 0x03
                    gstr_arrayoftasks[gs_arraycount].perodicity=periodicORoneshot;
 2ee:	40 83       	st	Z, r20
                    gstr_arrayoftasks[gs_arraycount].delay_milistone=0;
 2f0:	16 82       	std	Z+6, r1	; 0x06
 2f2:	15 82       	std	Z+5, r1	; 0x05
  
                    if(gs_arraycount==0)
 2f4:	91 11       	cpse	r25, r1
 2f6:	04 c0       	rjmp	.+8      	; 0x300 <TMU_Start_Timer+0x42>
                    {
                       Timer_Start(TMU_TIMER_ID,6);  
 2f8:	66 e0       	ldi	r22, 0x06	; 6
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	6d d1       	rcall	.+730    	; 0x5da <Timer_Start>
                    }

                  gs_arraycount++;
 300:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gs_arraycount>
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <gs_arraycount>
Parameters (out):
Parameters (inOut):
Return:*/

EnmTMUError_t TMU_Start_Timer(uint16_t time,ptrtotask_CBK_FUNC ptrtofun,uint8_t periodicORoneshot)
{   EnmTMUError_t status=E_OK;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	08 95       	ret
   if(gu8_multiple_init==not_init)
   {
      status=TMU_MODULE_NOT_INIT;
 30e:	88 ef       	ldi	r24, 0xF8	; 248
 310:	08 95       	ret
              }           
            }                    
         } 
         else
         {
            status=E_NOK;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	08 95       	ret
{   
         if(gs_arraycount<BUFFER_SIZE)
         {
            if((periodicORoneshot!=PERIODIC)&&(periodicORoneshot!=ONESHOT))
            {
               status=TMU_NOT_PERODICORONESHOT;
 316:	8a ef       	ldi	r24, 0xFA	; 250
 318:	08 95       	ret
            }               
            else
            {
              if(ptrtofun==NULL)
              {
                 status=TMU_FUN_NULL_POINTER;
 31a:	8b ef       	ldi	r24, 0xFB	; 251
         {
            status=E_NOK;
         }
}                  
return status;
}
 31c:	08 95       	ret

0000031e <TMU_Stop_Timer>:
* @brief: TMU Stop
* @param: ptrFun: pointer to callback function
* @return: EnmTMUError_t status code with error code if one occurred
*/
EnmTMUError_t TMU_Stop_Timer(void (*ptrtofun)(void))
{
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	bc 01       	movw	r22, r24
   EnmTMUError_t status=E_OK;
   uint8_t au8_counter=0; 
   uint8_t Flag=0;
   if(gs_arraycount==0)
 326:	40 91 78 00 	lds	r20, 0x0078	; 0x800078 <gs_arraycount>
 32a:	44 23       	and	r20, r20
 32c:	d1 f1       	breq	.+116    	; 0x3a2 <TMU_Stop_Timer+0x84>
 32e:	e2 e6       	ldi	r30, 0x62	; 98
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	10 e0       	ldi	r17, 0x00	; 0
 334:	90 e0       	ldi	r25, 0x00	; 0
  {
         for(au8_counter=0;au8_counter<BUFFER_SIZE;au8_counter++)
         {
      
            if(gstr_arrayoftasks[au8_counter].Ptrtotask==ptrtofun)
            {   Flag=1;
 336:	81 e0       	ldi	r24, 0x01	; 1
                  gstr_arrayoftasks[au8_counter].delay=0;
                  gstr_arrayoftasks[au8_counter].perodicity=0;
               }
               else
               {
                  gstr_arrayoftasks[au8_counter].Ptrtotask=gstr_arrayoftasks[BUFFER_SIZE-1].Ptrtotask;
 338:	ef 01       	movw	r28, r30
   else
  {
         for(au8_counter=0;au8_counter<BUFFER_SIZE;au8_counter++)
         {
      
            if(gstr_arrayoftasks[au8_counter].Ptrtotask==ptrtofun)
 33a:	23 81       	ldd	r18, Z+3	; 0x03
 33c:	34 81       	ldd	r19, Z+4	; 0x04
 33e:	26 17       	cp	r18, r22
 340:	37 07       	cpc	r19, r23
 342:	09 f5       	brne	.+66     	; 0x386 <TMU_Stop_Timer+0x68>
            {   Flag=1;
               if(au8_counter==BUFFER_SIZE-1)
 344:	92 30       	cpi	r25, 0x02	; 2
 346:	41 f4       	brne	.+16     	; 0x358 <TMU_Stop_Timer+0x3a>
               {
                  gstr_arrayoftasks[au8_counter].Ptrtotask=NULL;
 348:	14 82       	std	Z+4, r1	; 0x04
 34a:	13 82       	std	Z+3, r1	; 0x03
                  gstr_arrayoftasks[au8_counter].delay_milistone=0;
 34c:	16 82       	std	Z+6, r1	; 0x06
 34e:	15 82       	std	Z+5, r1	; 0x05
                  gstr_arrayoftasks[au8_counter].delay=0;
 350:	12 82       	std	Z+2, r1	; 0x02
 352:	11 82       	std	Z+1, r1	; 0x01
                  gstr_arrayoftasks[au8_counter].perodicity=0;
 354:	10 82       	st	Z, r1
 356:	15 c0       	rjmp	.+42     	; 0x382 <TMU_Stop_Timer+0x64>
               }
               else
               {
                  gstr_arrayoftasks[au8_counter].Ptrtotask=gstr_arrayoftasks[BUFFER_SIZE-1].Ptrtotask;
 358:	29 89       	ldd	r18, Y+17	; 0x11
 35a:	3a 89       	ldd	r19, Y+18	; 0x12
 35c:	34 83       	std	Z+4, r19	; 0x04
 35e:	23 83       	std	Z+3, r18	; 0x03
                  gstr_arrayoftasks[au8_counter].delay_milistone=gstr_arrayoftasks[BUFFER_SIZE-1].delay_milistone;
 360:	2b 89       	ldd	r18, Y+19	; 0x13
 362:	3c 89       	ldd	r19, Y+20	; 0x14
 364:	36 83       	std	Z+6, r19	; 0x06
 366:	25 83       	std	Z+5, r18	; 0x05
                  gstr_arrayoftasks[au8_counter].delay=gstr_arrayoftasks[BUFFER_SIZE-1].delay;
 368:	2f 85       	ldd	r18, Y+15	; 0x0f
 36a:	38 89       	ldd	r19, Y+16	; 0x10
 36c:	32 83       	std	Z+2, r19	; 0x02
 36e:	21 83       	std	Z+1, r18	; 0x01
                  gstr_arrayoftasks[au8_counter].perodicity=gstr_arrayoftasks[BUFFER_SIZE-1].perodicity;
 370:	2e 85       	ldd	r18, Y+14	; 0x0e
 372:	20 83       	st	Z, r18
            
                  gstr_arrayoftasks[BUFFER_SIZE-1].Ptrtotask=NULL;
 374:	1a 8a       	std	Y+18, r1	; 0x12
 376:	19 8a       	std	Y+17, r1	; 0x11
                  gstr_arrayoftasks[BUFFER_SIZE-1].delay_milistone=0;
 378:	1c 8a       	std	Y+20, r1	; 0x14
 37a:	1b 8a       	std	Y+19, r1	; 0x13
                  gstr_arrayoftasks[BUFFER_SIZE-1].delay=0;
 37c:	18 8a       	std	Y+16, r1	; 0x10
 37e:	1f 86       	std	Y+15, r1	; 0x0f
                  gstr_arrayoftasks[BUFFER_SIZE-1].perodicity=0;
 380:	1e 86       	std	Y+14, r1	; 0x0e
               }
               gs_arraycount--;
 382:	41 50       	subi	r20, 0x01	; 1
  {
         for(au8_counter=0;au8_counter<BUFFER_SIZE;au8_counter++)
         {
      
            if(gstr_arrayoftasks[au8_counter].Ptrtotask==ptrtofun)
            {   Flag=1;
 384:	18 2f       	mov	r17, r24
   {
      status=TMU_BUFFER_IS_EMPTY;
   }
   else
  {
         for(au8_counter=0;au8_counter<BUFFER_SIZE;au8_counter++)
 386:	9f 5f       	subi	r25, 0xFF	; 255
 388:	37 96       	adiw	r30, 0x07	; 7
 38a:	93 30       	cpi	r25, 0x03	; 3
 38c:	b1 f6       	brne	.-84     	; 0x33a <TMU_Stop_Timer+0x1c>
 38e:	40 93 78 00 	sts	0x0078, r20	; 0x800078 <gs_arraycount>
               }
               gs_arraycount--;
            }
      
         }
         if(gs_arraycount==0)
 392:	41 11       	cpse	r20, r1
 394:	02 c0       	rjmp	.+4      	; 0x39a <TMU_Stop_Timer+0x7c>
         {
            Timer_Stop(TMU_TIMER_ID);
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	87 d2       	rcall	.+1294   	; 0x8a8 <Timer_Stop>
         }
        if(Flag==0)
 39a:	11 11       	cpse	r17, r1
 39c:	04 c0       	rjmp	.+8      	; 0x3a6 <TMU_Stop_Timer+0x88>
        {
         status=TMU_MULTIPLE_STOP;
 39e:	8c ef       	ldi	r24, 0xFC	; 252
 3a0:	03 c0       	rjmp	.+6      	; 0x3a8 <TMU_Stop_Timer+0x8a>
   EnmTMUError_t status=E_OK;
   uint8_t au8_counter=0; 
   uint8_t Flag=0;
   if(gs_arraycount==0)
   {
      status=TMU_BUFFER_IS_EMPTY;
 3a2:	89 ef       	ldi	r24, 0xF9	; 249
 3a4:	01 c0       	rjmp	.+2      	; 0x3a8 <TMU_Stop_Timer+0x8a>
* @param: ptrFun: pointer to callback function
* @return: EnmTMUError_t status code with error code if one occurred
*/
EnmTMUError_t TMU_Stop_Timer(void (*ptrtofun)(void))
{
   EnmTMUError_t status=E_OK;
 3a6:	81 e0       	ldi	r24, 0x01	; 1
        {
         status=TMU_MULTIPLE_STOP;
        }   
 }       
   return status;
}
 3a8:	df 91       	pop	r29
 3aa:	cf 91       	pop	r28
 3ac:	1f 91       	pop	r17
 3ae:	08 95       	ret

000003b0 <TMU_Dispatch>:
* @return: EnmTMUError_t status code with error code if one occurred
*/


EnmTMUError_t TMU_Dispatch(void)
{
 3b0:	cf 92       	push	r12
 3b2:	df 92       	push	r13
 3b4:	ef 92       	push	r14
 3b6:	ff 92       	push	r15
 3b8:	0f 93       	push	r16
 3ba:	1f 93       	push	r17
 3bc:	cf 93       	push	r28
 3be:	df 93       	push	r29
 3c0:	1f 92       	push	r1
 3c2:	cd b7       	in	r28, 0x3d	; 61
 3c4:	de b7       	in	r29, 0x3e	; 62
   EnmTMUError_t status=E_OK;
   uint8_t u8_preloadtimer=6;
 3c6:	86 e0       	ldi	r24, 0x06	; 6
 3c8:	89 83       	std	Y+1, r24	; 0x01
   
   if(gu_timer_count1>=RESOLUTION)
 3ca:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <gu_timer_count1>
 3ce:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <gu_timer_count1+0x1>
 3d2:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <gu_timer_count1+0x2>
 3d6:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <gu_timer_count1+0x3>
 3da:	89 2b       	or	r24, r25
 3dc:	8a 2b       	or	r24, r26
 3de:	8b 2b       	or	r24, r27
 3e0:	09 f4       	brne	.+2      	; 0x3e4 <TMU_Dispatch+0x34>
 3e2:	46 c0       	rjmp	.+140    	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
   { 
      gu_timer_count1=0;
 3e4:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <gu_timer_count1>
 3e8:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <gu_timer_count1+0x1>
 3ec:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <gu_timer_count1+0x2>
 3f0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <gu_timer_count1+0x3>
      
      Timer_SetValue(TMU_TIMER_ID,&u8_preloadtimer);
 3f4:	be 01       	movw	r22, r28
 3f6:	6f 5f       	subi	r22, 0xFF	; 255
 3f8:	7f 4f       	sbci	r23, 0xFF	; 255
 3fa:	80 e0       	ldi	r24, 0x00	; 0
 3fc:	90 d2       	rcall	.+1312   	; 0x91e <Timer_SetValue>
 3fe:	02 e6       	ldi	r16, 0x62	; 98
 400:	10 e0       	ldi	r17, 0x00	; 0
 402:	0f 2e       	mov	r0, r31
 404:	f7 e7       	ldi	r31, 0x77	; 119
 406:	ef 2e       	mov	r14, r31
 408:	f0 e0       	ldi	r31, 0x00	; 0
 40a:	ff 2e       	mov	r15, r31
 40c:	f0 2d       	mov	r31, r0
 40e:	f8 01       	movw	r30, r16
      	/*Loop through Tasks in the array and increment milestones*/
      uint8_t u8_counter=0;
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
      {
         if(gstr_arrayoftasks[u8_counter].Ptrtotask==NULL)
 410:	83 81       	ldd	r24, Z+3	; 0x03
 412:	94 81       	ldd	r25, Z+4	; 0x04
 414:	89 2b       	or	r24, r25
 416:	29 f0       	breq	.+10     	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
         {
            
         }
         else
         {
            gstr_arrayoftasks[u8_counter].delay_milistone++;
 418:	85 81       	ldd	r24, Z+5	; 0x05
 41a:	96 81       	ldd	r25, Z+6	; 0x06
 41c:	01 96       	adiw	r24, 0x01	; 1
 41e:	96 83       	std	Z+6, r25	; 0x06
 420:	85 83       	std	Z+5, r24	; 0x05
 422:	37 96       	adiw	r30, 0x07	; 7
      gu_timer_count1=0;
      
      Timer_SetValue(TMU_TIMER_ID,&u8_preloadtimer);
      	/*Loop through Tasks in the array and increment milestones*/
      uint8_t u8_counter=0;
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
 424:	ee 15       	cp	r30, r14
 426:	ff 05       	cpc	r31, r15
 428:	99 f7       	brne	.-26     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
         }
      }
      /* Loop through  array of structure and handle each one */
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
      {
         if(gstr_arrayoftasks[u8_counter].Ptrtotask==NULL)
 42a:	d8 01       	movw	r26, r16
 42c:	13 96       	adiw	r26, 0x03	; 3
 42e:	ed 91       	ld	r30, X+
 430:	fc 91       	ld	r31, X
 432:	14 97       	sbiw	r26, 0x04	; 4
 434:	30 97       	sbiw	r30, 0x00	; 0
 436:	b9 f0       	breq	.+46     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
         {
            
         }
         else
         {
            if(gstr_arrayoftasks[u8_counter].delay_milistone>=gstr_arrayoftasks[u8_counter].delay)
 438:	15 96       	adiw	r26, 0x05	; 5
 43a:	2d 91       	ld	r18, X+
 43c:	3c 91       	ld	r19, X
 43e:	16 97       	sbiw	r26, 0x06	; 6
 440:	11 96       	adiw	r26, 0x01	; 1
 442:	8d 91       	ld	r24, X+
 444:	9c 91       	ld	r25, X
 446:	12 97       	sbiw	r26, 0x02	; 2
 448:	28 17       	cp	r18, r24
 44a:	39 07       	cpc	r19, r25
 44c:	60 f0       	brcs	.+24     	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
             {
                gstr_arrayoftasks[u8_counter].delay_milistone=0;
 44e:	16 96       	adiw	r26, 0x06	; 6
 450:	1c 92       	st	X, r1
 452:	1e 92       	st	-X, r1
 454:	15 97       	sbiw	r26, 0x05	; 5
                gstr_arrayoftasks[u8_counter].Ptrtotask();
 456:	09 95       	icall
                if(gstr_arrayoftasks[u8_counter].perodicity==ONESHOT)
 458:	f8 01       	movw	r30, r16
 45a:	80 81       	ld	r24, Z
 45c:	81 11       	cpse	r24, r1
 45e:	03 c0       	rjmp	.+6      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
                {
                   TMU_Stop_Timer(gstr_arrayoftasks[u8_counter].Ptrtotask);
 460:	83 81       	ldd	r24, Z+3	; 0x03
 462:	94 81       	ldd	r25, Z+4	; 0x04
 464:	5c df       	rcall	.-328    	; 0x31e <TMU_Stop_Timer>
 466:	09 5f       	subi	r16, 0xF9	; 249
 468:	1f 4f       	sbci	r17, 0xFF	; 255
         {
            gstr_arrayoftasks[u8_counter].delay_milistone++;
         }
      }
      /* Loop through  array of structure and handle each one */
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
 46a:	0e 15       	cp	r16, r14
 46c:	1f 05       	cpc	r17, r15
 46e:	e9 f6       	brne	.-70     	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
   else
   {
      
   }
   return status;
}
 470:	81 e0       	ldi	r24, 0x01	; 1
 472:	0f 90       	pop	r0
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	df 90       	pop	r13
 482:	cf 90       	pop	r12
 484:	08 95       	ret

00000486 <func_call>:
   
   
}
void func_call(void)
{
   DIO_Toggle(GPIOA,PIN0);
 486:	61 e0       	ldi	r22, 0x01	; 1
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	b6 ce       	rjmp	.-660    	; 0x1f8 <DIO_Toggle>
 48c:	08 95       	ret

0000048e <func_call1>:
}

void func_call1(void)
{
   DIO_Toggle(GPIOA,PIN1);
 48e:	62 e0       	ldi	r22, 0x02	; 2
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	b2 ce       	rjmp	.-668    	; 0x1f8 <DIO_Toggle>
 494:	08 95       	ret

00000496 <func_call2>:
}

void func_call2(void)
{
   DIO_Toggle(GPIOA,PIN2);
 496:	64 e0       	ldi	r22, 0x04	; 4
 498:	80 e0       	ldi	r24, 0x00	; 0
 49a:	ae ce       	rjmp	.-676    	; 0x1f8 <DIO_Toggle>
 49c:	08 95       	ret

0000049e <func_call3>:
}

void func_call3(void)
{
   DIO_Toggle(GPIOA,PIN3);
 49e:	68 e0       	ldi	r22, 0x08	; 8
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	aa ce       	rjmp	.-684    	; 0x1f8 <DIO_Toggle>
 4a4:	08 95       	ret

000004a6 <main>:

extern Task_BlockType gstr_arrayoftasks[BUFFER_SIZE];


int main(void)
{
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	00 d0       	rcall	.+0      	; 0x4ac <main+0x6>
 4ac:	1f 92       	push	r1
 4ae:	cd b7       	in	r28, 0x3d	; 61
 4b0:	de b7       	in	r29, 0x3e	; 62
	sei();
 4b2:	78 94       	sei

   DIO_Cfg_s instanse={GPIOA,FULL_PORT,OUTPUT};
 4b4:	19 82       	std	Y+1, r1	; 0x01
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	8a 83       	std	Y+2, r24	; 0x02
 4ba:	8b 83       	std	Y+3, r24	; 0x03


   DIO_init(&instanse);
 4bc:	ce 01       	movw	r24, r28
 4be:	01 96       	adiw	r24, 0x01	; 1
 4c0:	ec dd       	rcall	.-1064   	; 0x9a <DIO_init>
      }
   */

   /*test case2 (BUFFER_SIZE is 3)*/

   TMU_Init(&instans);
 4c2:	80 e6       	ldi	r24, 0x60	; 96
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	b6 de       	rcall	.-660    	; 0x234 <TMU_Init>
   TMU_Start_Timer(1000,func_call,ONESHOT);
 4c8:	40 e0       	ldi	r20, 0x00	; 0
 4ca:	63 e4       	ldi	r22, 0x43	; 67
 4cc:	72 e0       	ldi	r23, 0x02	; 2
 4ce:	88 ee       	ldi	r24, 0xE8	; 232
 4d0:	93 e0       	ldi	r25, 0x03	; 3
 4d2:	f5 de       	rcall	.-534    	; 0x2be <TMU_Start_Timer>
   TMU_Start_Timer(500,func_call1,PERIODIC);
 4d4:	41 e0       	ldi	r20, 0x01	; 1
 4d6:	67 e4       	ldi	r22, 0x47	; 71
 4d8:	72 e0       	ldi	r23, 0x02	; 2
 4da:	84 ef       	ldi	r24, 0xF4	; 244
 4dc:	91 e0       	ldi	r25, 0x01	; 1
 4de:	ef de       	rcall	.-546    	; 0x2be <TMU_Start_Timer>
   TMU_Start_Timer(300,func_call2,PERIODIC);
 4e0:	41 e0       	ldi	r20, 0x01	; 1
 4e2:	6b e4       	ldi	r22, 0x4B	; 75
 4e4:	72 e0       	ldi	r23, 0x02	; 2
 4e6:	8c e2       	ldi	r24, 0x2C	; 44
 4e8:	91 e0       	ldi	r25, 0x01	; 1
   TMU_Stop_Timer(func_call2);
 4ea:	e9 de       	rcall	.-558    	; 0x2be <TMU_Start_Timer>
 4ec:	8b e4       	ldi	r24, 0x4B	; 75
 4ee:	92 e0       	ldi	r25, 0x02	; 2
   if(TMU_Stop_Timer(func_call3)==E_NOK)
 4f0:	16 df       	rcall	.-468    	; 0x31e <TMU_Stop_Timer>
 4f2:	8f e4       	ldi	r24, 0x4F	; 79
 4f4:	92 e0       	ldi	r25, 0x02	; 2
 4f6:	13 df       	rcall	.-474    	; 0x31e <TMU_Stop_Timer>
   {
    DIO_Write(GPIOA,BIT7,HIGH);
 4f8:	81 11       	cpse	r24, r1
 4fa:	03 c0       	rjmp	.+6      	; 0x502 <main+0x5c>
 4fc:	4f ef       	ldi	r20, 0xFF	; 255
 4fe:	60 e8       	ldi	r22, 0x80	; 128
   
*/
 
   while(1)
   {
      TMU_Dispatch();
 500:	2d de       	rcall	.-934    	; 0x15c <DIO_Write>
 502:	56 df       	rcall	.-340    	; 0x3b0 <TMU_Dispatch>
 504:	fe cf       	rjmp	.-4      	; 0x502 <main+0x5c>

00000506 <Timer_Init>:
	else
	{
		ERROR=E_NOK;
	}
	return ERROR;
}
 506:	fc 01       	movw	r30, r24
 508:	89 2b       	or	r24, r25
 50a:	09 f4       	brne	.+2      	; 0x50e <Timer_Init+0x8>
 50c:	64 c0       	rjmp	.+200    	; 0x5d6 <Timer_Init+0xd0>
 50e:	30 81       	ld	r19, Z
 510:	83 2f       	mov	r24, r19
 512:	90 e0       	ldi	r25, 0x00	; 0
 514:	dc 01       	movw	r26, r24
 516:	a4 58       	subi	r26, 0x84	; 132
 518:	bf 4f       	sbci	r27, 0xFF	; 255
 51a:	23 81       	ldd	r18, Z+3	; 0x03
 51c:	2c 93       	st	X, r18
 51e:	21 81       	ldd	r18, Z+1	; 0x01
 520:	21 30       	cpi	r18, 0x01	; 1
 522:	09 f4       	brne	.+2      	; 0x526 <Timer_Init+0x20>
 524:	46 c0       	rjmp	.+140    	; 0x5b2 <Timer_Init+0xac>
 526:	20 f0       	brcs	.+8      	; 0x530 <Timer_Init+0x2a>
 528:	22 30       	cpi	r18, 0x02	; 2
 52a:	09 f4       	brne	.+2      	; 0x52e <Timer_Init+0x28>
 52c:	48 c0       	rjmp	.+144    	; 0x5be <Timer_Init+0xb8>
 52e:	4c c0       	rjmp	.+152    	; 0x5c8 <Timer_Init+0xc2>
 530:	31 30       	cpi	r19, 0x01	; 1
 532:	91 f0       	breq	.+36     	; 0x558 <Timer_Init+0x52>
 534:	18 f0       	brcs	.+6      	; 0x53c <Timer_Init+0x36>
 536:	32 30       	cpi	r19, 0x02	; 2
 538:	31 f1       	breq	.+76     	; 0x586 <Timer_Init+0x80>
 53a:	35 c0       	rjmp	.+106    	; 0x5a6 <Timer_Init+0xa0>
 53c:	83 b7       	in	r24, 0x33	; 51
 53e:	88 7f       	andi	r24, 0xF8	; 248
 540:	83 bf       	out	0x33, r24	; 51
 542:	82 81       	ldd	r24, Z+2	; 0x02
 544:	81 30       	cpi	r24, 0x01	; 1
 546:	21 f4       	brne	.+8      	; 0x550 <Timer_Init+0x4a>
 548:	89 b7       	in	r24, 0x39	; 57
 54a:	81 60       	ori	r24, 0x01	; 1
 54c:	89 bf       	out	0x39, r24	; 57
 54e:	2b c0       	rjmp	.+86     	; 0x5a6 <Timer_Init+0xa0>
 550:	89 b7       	in	r24, 0x39	; 57
 552:	8e 7f       	andi	r24, 0xFE	; 254
 554:	89 bf       	out	0x39, r24	; 57
 556:	27 c0       	rjmp	.+78     	; 0x5a6 <Timer_Init+0xa0>
 558:	8f b5       	in	r24, 0x2f	; 47
 55a:	8d 7f       	andi	r24, 0xFD	; 253
 55c:	8f bd       	out	0x2f, r24	; 47
 55e:	8f b5       	in	r24, 0x2f	; 47
 560:	8e 7f       	andi	r24, 0xFE	; 254
 562:	8f bd       	out	0x2f, r24	; 47
 564:	8e b5       	in	r24, 0x2e	; 46
 566:	87 7f       	andi	r24, 0xF7	; 247
 568:	8e bd       	out	0x2e, r24	; 46
 56a:	8e b5       	in	r24, 0x2e	; 46
 56c:	8f 7e       	andi	r24, 0xEF	; 239
 56e:	8e bd       	out	0x2e, r24	; 46
 570:	82 81       	ldd	r24, Z+2	; 0x02
 572:	81 11       	cpse	r24, r1
 574:	04 c0       	rjmp	.+8      	; 0x57e <Timer_Init+0x78>
 576:	89 b7       	in	r24, 0x39	; 57
 578:	8e 7f       	andi	r24, 0xFE	; 254
 57a:	89 bf       	out	0x39, r24	; 57
 57c:	14 c0       	rjmp	.+40     	; 0x5a6 <Timer_Init+0xa0>
 57e:	89 b7       	in	r24, 0x39	; 57
 580:	81 60       	ori	r24, 0x01	; 1
 582:	89 bf       	out	0x39, r24	; 57
 584:	10 c0       	rjmp	.+32     	; 0x5a6 <Timer_Init+0xa0>
 586:	85 b5       	in	r24, 0x25	; 37
 588:	87 7f       	andi	r24, 0xF7	; 247
 58a:	85 bd       	out	0x25, r24	; 37
 58c:	85 b5       	in	r24, 0x25	; 37
 58e:	8f 7b       	andi	r24, 0xBF	; 191
 590:	85 bd       	out	0x25, r24	; 37
 592:	82 81       	ldd	r24, Z+2	; 0x02
 594:	81 11       	cpse	r24, r1
 596:	04 c0       	rjmp	.+8      	; 0x5a0 <Timer_Init+0x9a>
 598:	89 b7       	in	r24, 0x39	; 57
 59a:	8e 7f       	andi	r24, 0xFE	; 254
 59c:	89 bf       	out	0x39, r24	; 57
 59e:	03 c0       	rjmp	.+6      	; 0x5a6 <Timer_Init+0xa0>
 5a0:	89 b7       	in	r24, 0x39	; 57
 5a2:	81 60       	ori	r24, 0x01	; 1
 5a4:	89 bf       	out	0x39, r24	; 57
 5a6:	a0 81       	ld	r26, Z
 5a8:	b0 e0       	ldi	r27, 0x00	; 0
 5aa:	a1 58       	subi	r26, 0x81	; 129
 5ac:	bf 4f       	sbci	r27, 0xFF	; 255
 5ae:	1c 92       	st	X, r1
 5b0:	0b c0       	rjmp	.+22     	; 0x5c8 <Timer_Init+0xc2>
 5b2:	dc 01       	movw	r26, r24
 5b4:	a1 58       	subi	r26, 0x81	; 129
 5b6:	bf 4f       	sbci	r27, 0xFF	; 255
 5b8:	21 e0       	ldi	r18, 0x01	; 1
 5ba:	2c 93       	st	X, r18
 5bc:	05 c0       	rjmp	.+10     	; 0x5c8 <Timer_Init+0xc2>
 5be:	dc 01       	movw	r26, r24
 5c0:	a1 58       	subi	r26, 0x81	; 129
 5c2:	bf 4f       	sbci	r27, 0xFF	; 255
 5c4:	22 e0       	ldi	r18, 0x02	; 2
 5c6:	2c 93       	st	X, r18
 5c8:	e0 81       	ld	r30, Z
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	e7 58       	subi	r30, 0x87	; 135
 5ce:	ff 4f       	sbci	r31, 0xFF	; 255
 5d0:	81 e0       	ldi	r24, 0x01	; 1
 5d2:	80 83       	st	Z, r24
 5d4:	08 95       	ret
 5d6:	80 e0       	ldi	r24, 0x00	; 0
 5d8:	08 95       	ret

000005da <Timer_Start>:
 5da:	81 30       	cpi	r24, 0x01	; 1
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <Timer_Start+0x6>
 5de:	77 c0       	rjmp	.+238    	; 0x6ce <Timer_Start+0xf4>
 5e0:	20 f0       	brcs	.+8      	; 0x5ea <Timer_Start+0x10>
 5e2:	82 30       	cpi	r24, 0x02	; 2
 5e4:	09 f4       	brne	.+2      	; 0x5e8 <Timer_Start+0xe>
 5e6:	e2 c0       	rjmp	.+452    	; 0x7ac <Timer_Start+0x1d2>
 5e8:	4b c1       	rjmp	.+662    	; 0x880 <__stack+0x21>
 5ea:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gsau8_initState>
 5ee:	81 30       	cpi	r24, 0x01	; 1
 5f0:	09 f0       	breq	.+2      	; 0x5f4 <Timer_Start+0x1a>
 5f2:	48 c1       	rjmp	.+656    	; 0x884 <__stack+0x25>
 5f4:	62 bf       	out	0x32, r22	; 50
 5f6:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <gsau8_mode>
 5fa:	81 30       	cpi	r24, 0x01	; 1
 5fc:	09 f4       	brne	.+2      	; 0x600 <Timer_Start+0x26>
 5fe:	51 c0       	rjmp	.+162    	; 0x6a2 <Timer_Start+0xc8>
 600:	20 f0       	brcs	.+8      	; 0x60a <Timer_Start+0x30>
 602:	82 30       	cpi	r24, 0x02	; 2
 604:	09 f4       	brne	.+2      	; 0x608 <Timer_Start+0x2e>
 606:	58 c0       	rjmp	.+176    	; 0x6b8 <Timer_Start+0xde>
 608:	3f c1       	rjmp	.+638    	; 0x888 <__stack+0x29>
 60a:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gsau8_preScaler>
 60e:	84 30       	cpi	r24, 0x04	; 4
 610:	09 f1       	breq	.+66     	; 0x654 <Timer_Start+0x7a>
 612:	28 f4       	brcc	.+10     	; 0x61e <Timer_Start+0x44>
 614:	81 30       	cpi	r24, 0x01	; 1
 616:	41 f0       	breq	.+16     	; 0x628 <Timer_Start+0x4e>
 618:	82 30       	cpi	r24, 0x02	; 2
 61a:	89 f0       	breq	.+34     	; 0x63e <Timer_Start+0x64>
 61c:	37 c1       	rjmp	.+622    	; 0x88c <__stack+0x2d>
 61e:	86 30       	cpi	r24, 0x06	; 6
 620:	21 f1       	breq	.+72     	; 0x66a <Timer_Start+0x90>
 622:	87 30       	cpi	r24, 0x07	; 7
 624:	69 f1       	breq	.+90     	; 0x680 <Timer_Start+0xa6>
 626:	32 c1       	rjmp	.+612    	; 0x88c <__stack+0x2d>
 628:	83 b7       	in	r24, 0x33	; 51
 62a:	8b 7f       	andi	r24, 0xFB	; 251
 62c:	83 bf       	out	0x33, r24	; 51
 62e:	83 b7       	in	r24, 0x33	; 51
 630:	8d 7f       	andi	r24, 0xFD	; 253
 632:	83 bf       	out	0x33, r24	; 51
 634:	83 b7       	in	r24, 0x33	; 51
 636:	81 60       	ori	r24, 0x01	; 1
 638:	83 bf       	out	0x33, r24	; 51
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	08 95       	ret
 63e:	83 b7       	in	r24, 0x33	; 51
 640:	8b 7f       	andi	r24, 0xFB	; 251
 642:	83 bf       	out	0x33, r24	; 51
 644:	83 b7       	in	r24, 0x33	; 51
 646:	8e 7f       	andi	r24, 0xFE	; 254
 648:	83 bf       	out	0x33, r24	; 51
 64a:	83 b7       	in	r24, 0x33	; 51
 64c:	82 60       	ori	r24, 0x02	; 2
 64e:	83 bf       	out	0x33, r24	; 51
 650:	81 e0       	ldi	r24, 0x01	; 1
 652:	08 95       	ret
 654:	83 b7       	in	r24, 0x33	; 51
 656:	8b 7f       	andi	r24, 0xFB	; 251
 658:	83 bf       	out	0x33, r24	; 51
 65a:	83 b7       	in	r24, 0x33	; 51
 65c:	82 60       	ori	r24, 0x02	; 2
 65e:	83 bf       	out	0x33, r24	; 51
 660:	83 b7       	in	r24, 0x33	; 51
 662:	81 60       	ori	r24, 0x01	; 1
 664:	83 bf       	out	0x33, r24	; 51
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	08 95       	ret
 66a:	83 b7       	in	r24, 0x33	; 51
 66c:	8e 7f       	andi	r24, 0xFE	; 254
 66e:	83 bf       	out	0x33, r24	; 51
 670:	83 b7       	in	r24, 0x33	; 51
 672:	8d 7f       	andi	r24, 0xFD	; 253
 674:	83 bf       	out	0x33, r24	; 51
 676:	83 b7       	in	r24, 0x33	; 51
 678:	84 60       	ori	r24, 0x04	; 4
 67a:	83 bf       	out	0x33, r24	; 51
 67c:	81 e0       	ldi	r24, 0x01	; 1
 67e:	08 95       	ret
 680:	83 b7       	in	r24, 0x33	; 51
 682:	81 60       	ori	r24, 0x01	; 1
 684:	83 bf       	out	0x33, r24	; 51
 686:	83 b7       	in	r24, 0x33	; 51
 688:	8d 7f       	andi	r24, 0xFD	; 253
 68a:	83 bf       	out	0x33, r24	; 51
 68c:	83 b7       	in	r24, 0x33	; 51
 68e:	84 60       	ori	r24, 0x04	; 4
 690:	83 bf       	out	0x33, r24	; 51
 692:	83 b7       	in	r24, 0x33	; 51
 694:	8e 7f       	andi	r24, 0xFE	; 254
 696:	83 bf       	out	0x33, r24	; 51
 698:	83 b7       	in	r24, 0x33	; 51
 69a:	82 60       	ori	r24, 0x02	; 2
 69c:	83 bf       	out	0x33, r24	; 51
 69e:	81 e0       	ldi	r24, 0x01	; 1
 6a0:	08 95       	ret
 6a2:	83 b7       	in	r24, 0x33	; 51
 6a4:	84 60       	ori	r24, 0x04	; 4
 6a6:	83 bf       	out	0x33, r24	; 51
 6a8:	83 b7       	in	r24, 0x33	; 51
 6aa:	82 60       	ori	r24, 0x02	; 2
 6ac:	83 bf       	out	0x33, r24	; 51
 6ae:	83 b7       	in	r24, 0x33	; 51
 6b0:	81 60       	ori	r24, 0x01	; 1
 6b2:	83 bf       	out	0x33, r24	; 51
 6b4:	81 e0       	ldi	r24, 0x01	; 1
 6b6:	08 95       	ret
 6b8:	83 b7       	in	r24, 0x33	; 51
 6ba:	84 60       	ori	r24, 0x04	; 4
 6bc:	83 bf       	out	0x33, r24	; 51
 6be:	83 b7       	in	r24, 0x33	; 51
 6c0:	8e 7f       	andi	r24, 0xFE	; 254
 6c2:	83 bf       	out	0x33, r24	; 51
 6c4:	83 b7       	in	r24, 0x33	; 51
 6c6:	81 60       	ori	r24, 0x01	; 1
 6c8:	83 bf       	out	0x33, r24	; 51
 6ca:	81 e0       	ldi	r24, 0x01	; 1
 6cc:	08 95       	ret
 6ce:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gsau8_initState+0x1>
 6d2:	81 30       	cpi	r24, 0x01	; 1
 6d4:	09 f0       	breq	.+2      	; 0x6d8 <Timer_Start+0xfe>
 6d6:	dc c0       	rjmp	.+440    	; 0x890 <__stack+0x31>
 6d8:	60 95       	com	r22
 6da:	70 95       	com	r23
 6dc:	7d bd       	out	0x2d, r23	; 45
 6de:	6c bd       	out	0x2c, r22	; 44
 6e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gsau8_mode+0x1>
 6e4:	81 30       	cpi	r24, 0x01	; 1
 6e6:	09 f4       	brne	.+2      	; 0x6ea <Timer_Start+0x110>
 6e8:	4b c0       	rjmp	.+150    	; 0x780 <Timer_Start+0x1a6>
 6ea:	20 f0       	brcs	.+8      	; 0x6f4 <Timer_Start+0x11a>
 6ec:	82 30       	cpi	r24, 0x02	; 2
 6ee:	09 f4       	brne	.+2      	; 0x6f2 <Timer_Start+0x118>
 6f0:	52 c0       	rjmp	.+164    	; 0x796 <Timer_Start+0x1bc>
 6f2:	d0 c0       	rjmp	.+416    	; 0x894 <__stack+0x35>
 6f4:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <gsau8_preScaler+0x1>
 6f8:	84 30       	cpi	r24, 0x04	; 4
 6fa:	09 f1       	breq	.+66     	; 0x73e <Timer_Start+0x164>
 6fc:	28 f4       	brcc	.+10     	; 0x708 <Timer_Start+0x12e>
 6fe:	81 30       	cpi	r24, 0x01	; 1
 700:	41 f0       	breq	.+16     	; 0x712 <Timer_Start+0x138>
 702:	82 30       	cpi	r24, 0x02	; 2
 704:	89 f0       	breq	.+34     	; 0x728 <Timer_Start+0x14e>
 706:	c8 c0       	rjmp	.+400    	; 0x898 <__stack+0x39>
 708:	86 30       	cpi	r24, 0x06	; 6
 70a:	21 f1       	breq	.+72     	; 0x754 <Timer_Start+0x17a>
 70c:	87 30       	cpi	r24, 0x07	; 7
 70e:	69 f1       	breq	.+90     	; 0x76a <Timer_Start+0x190>
 710:	c3 c0       	rjmp	.+390    	; 0x898 <__stack+0x39>
 712:	8e b5       	in	r24, 0x2e	; 46
 714:	8b 7f       	andi	r24, 0xFB	; 251
 716:	8e bd       	out	0x2e, r24	; 46
 718:	8e b5       	in	r24, 0x2e	; 46
 71a:	8d 7f       	andi	r24, 0xFD	; 253
 71c:	8e bd       	out	0x2e, r24	; 46
 71e:	8e b5       	in	r24, 0x2e	; 46
 720:	81 60       	ori	r24, 0x01	; 1
 722:	8e bd       	out	0x2e, r24	; 46
 724:	81 e0       	ldi	r24, 0x01	; 1
 726:	08 95       	ret
 728:	8e b5       	in	r24, 0x2e	; 46
 72a:	8b 7f       	andi	r24, 0xFB	; 251
 72c:	8e bd       	out	0x2e, r24	; 46
 72e:	8e b5       	in	r24, 0x2e	; 46
 730:	8e 7f       	andi	r24, 0xFE	; 254
 732:	8e bd       	out	0x2e, r24	; 46
 734:	8e b5       	in	r24, 0x2e	; 46
 736:	82 60       	ori	r24, 0x02	; 2
 738:	8e bd       	out	0x2e, r24	; 46
 73a:	81 e0       	ldi	r24, 0x01	; 1
 73c:	08 95       	ret
 73e:	8e b5       	in	r24, 0x2e	; 46
 740:	8b 7f       	andi	r24, 0xFB	; 251
 742:	8e bd       	out	0x2e, r24	; 46
 744:	8e b5       	in	r24, 0x2e	; 46
 746:	81 60       	ori	r24, 0x01	; 1
 748:	8e bd       	out	0x2e, r24	; 46
 74a:	8e b5       	in	r24, 0x2e	; 46
 74c:	82 60       	ori	r24, 0x02	; 2
 74e:	8e bd       	out	0x2e, r24	; 46
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	08 95       	ret
 754:	8e b5       	in	r24, 0x2e	; 46
 756:	8d 7f       	andi	r24, 0xFD	; 253
 758:	8e bd       	out	0x2e, r24	; 46
 75a:	8e b5       	in	r24, 0x2e	; 46
 75c:	8e 7f       	andi	r24, 0xFE	; 254
 75e:	8e bd       	out	0x2e, r24	; 46
 760:	8e b5       	in	r24, 0x2e	; 46
 762:	84 60       	ori	r24, 0x04	; 4
 764:	8e bd       	out	0x2e, r24	; 46
 766:	81 e0       	ldi	r24, 0x01	; 1
 768:	08 95       	ret
 76a:	8e b5       	in	r24, 0x2e	; 46
 76c:	8d 7f       	andi	r24, 0xFD	; 253
 76e:	8e bd       	out	0x2e, r24	; 46
 770:	8e b5       	in	r24, 0x2e	; 46
 772:	81 60       	ori	r24, 0x01	; 1
 774:	8e bd       	out	0x2e, r24	; 46
 776:	8e b5       	in	r24, 0x2e	; 46
 778:	84 60       	ori	r24, 0x04	; 4
 77a:	8e bd       	out	0x2e, r24	; 46
 77c:	81 e0       	ldi	r24, 0x01	; 1
 77e:	08 95       	ret
 780:	8e b5       	in	r24, 0x2e	; 46
 782:	82 60       	ori	r24, 0x02	; 2
 784:	8e bd       	out	0x2e, r24	; 46
 786:	8e b5       	in	r24, 0x2e	; 46
 788:	81 60       	ori	r24, 0x01	; 1
 78a:	8e bd       	out	0x2e, r24	; 46
 78c:	8e b5       	in	r24, 0x2e	; 46
 78e:	84 60       	ori	r24, 0x04	; 4
 790:	8e bd       	out	0x2e, r24	; 46
 792:	81 e0       	ldi	r24, 0x01	; 1
 794:	08 95       	ret
 796:	8e b5       	in	r24, 0x2e	; 46
 798:	82 60       	ori	r24, 0x02	; 2
 79a:	8e bd       	out	0x2e, r24	; 46
 79c:	8e b5       	in	r24, 0x2e	; 46
 79e:	84 60       	ori	r24, 0x04	; 4
 7a0:	8e bd       	out	0x2e, r24	; 46
 7a2:	8e b5       	in	r24, 0x2e	; 46
 7a4:	8e 7f       	andi	r24, 0xFE	; 254
 7a6:	8e bd       	out	0x2e, r24	; 46
 7a8:	81 e0       	ldi	r24, 0x01	; 1
 7aa:	08 95       	ret
 7ac:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gsau8_initState+0x2>
 7b0:	81 30       	cpi	r24, 0x01	; 1
 7b2:	09 f0       	breq	.+2      	; 0x7b6 <Timer_Start+0x1dc>
 7b4:	73 c0       	rjmp	.+230    	; 0x89c <__stack+0x3d>
 7b6:	60 95       	com	r22
 7b8:	64 bd       	out	0x24, r22	; 36
 7ba:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gsau8_mode+0x2>
 7be:	88 23       	and	r24, r24
 7c0:	29 f0       	breq	.+10     	; 0x7cc <Timer_Start+0x1f2>
 7c2:	83 30       	cpi	r24, 0x03	; 3
 7c4:	08 f4       	brcc	.+2      	; 0x7c8 <Timer_Start+0x1ee>
 7c6:	6c c0       	rjmp	.+216    	; 0x8a0 <__stack+0x41>
 7c8:	80 e0       	ldi	r24, 0x00	; 0
 7ca:	08 95       	ret
 7cc:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <gsau8_preScaler+0x2>
 7d0:	8e 2f       	mov	r24, r30
 7d2:	90 e0       	ldi	r25, 0x00	; 0
 7d4:	fc 01       	movw	r30, r24
 7d6:	31 97       	sbiw	r30, 0x01	; 1
 7d8:	e7 30       	cpi	r30, 0x07	; 7
 7da:	f1 05       	cpc	r31, r1
 7dc:	08 f0       	brcs	.+2      	; 0x7e0 <Timer_Start+0x206>
 7de:	62 c0       	rjmp	.+196    	; 0x8a4 <__stack+0x45>
 7e0:	e6 5d       	subi	r30, 0xD6	; 214
 7e2:	ff 4f       	sbci	r31, 0xFF	; 255
 7e4:	da c0       	rjmp	.+436    	; 0x99a <__tablejump2__>
 7e6:	85 b5       	in	r24, 0x25	; 37
 7e8:	84 60       	ori	r24, 0x04	; 4
 7ea:	85 bd       	out	0x25, r24	; 37
 7ec:	85 b5       	in	r24, 0x25	; 37
 7ee:	82 60       	ori	r24, 0x02	; 2
 7f0:	85 bd       	out	0x25, r24	; 37
 7f2:	85 b5       	in	r24, 0x25	; 37
 7f4:	81 60       	ori	r24, 0x01	; 1
 7f6:	85 bd       	out	0x25, r24	; 37
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	08 95       	ret
 7fc:	85 b5       	in	r24, 0x25	; 37
 7fe:	8e 7f       	andi	r24, 0xFE	; 254
 800:	85 bd       	out	0x25, r24	; 37
 802:	85 b5       	in	r24, 0x25	; 37
 804:	8b 7f       	andi	r24, 0xFB	; 251
 806:	85 bd       	out	0x25, r24	; 37
 808:	85 b5       	in	r24, 0x25	; 37
 80a:	82 60       	ori	r24, 0x02	; 2
 80c:	85 bd       	out	0x25, r24	; 37
 80e:	81 e0       	ldi	r24, 0x01	; 1
 810:	08 95       	ret
 812:	85 b5       	in	r24, 0x25	; 37
 814:	8b 7f       	andi	r24, 0xFB	; 251
 816:	85 bd       	out	0x25, r24	; 37
 818:	85 b5       	in	r24, 0x25	; 37
 81a:	81 60       	ori	r24, 0x01	; 1
 81c:	85 bd       	out	0x25, r24	; 37
 81e:	85 b5       	in	r24, 0x25	; 37
 820:	82 60       	ori	r24, 0x02	; 2
 822:	85 bd       	out	0x25, r24	; 37
 824:	81 e0       	ldi	r24, 0x01	; 1
 826:	08 95       	ret
 828:	85 b5       	in	r24, 0x25	; 37
 82a:	84 60       	ori	r24, 0x04	; 4
 82c:	85 bd       	out	0x25, r24	; 37
 82e:	85 b5       	in	r24, 0x25	; 37
 830:	8e 7f       	andi	r24, 0xFE	; 254
 832:	85 bd       	out	0x25, r24	; 37
 834:	85 b5       	in	r24, 0x25	; 37
 836:	8d 7f       	andi	r24, 0xFD	; 253
 838:	85 bd       	out	0x25, r24	; 37
 83a:	81 e0       	ldi	r24, 0x01	; 1
 83c:	08 95       	ret
 83e:	85 b5       	in	r24, 0x25	; 37
 840:	84 60       	ori	r24, 0x04	; 4
 842:	85 bd       	out	0x25, r24	; 37
 844:	85 b5       	in	r24, 0x25	; 37
 846:	81 60       	ori	r24, 0x01	; 1
 848:	85 bd       	out	0x25, r24	; 37
 84a:	85 b5       	in	r24, 0x25	; 37
 84c:	8d 7f       	andi	r24, 0xFD	; 253
 84e:	85 bd       	out	0x25, r24	; 37
 850:	81 e0       	ldi	r24, 0x01	; 1
 852:	08 95       	ret
 854:	85 b5       	in	r24, 0x25	; 37
 856:	84 60       	ori	r24, 0x04	; 4
 858:	85 bd       	out	0x25, r24	; 37
 85a:	85 b5       	in	r24, 0x25	; 37
 85c:	82 60       	ori	r24, 0x02	; 2
 85e:	85 bd       	out	0x25, r24	; 37
 860:	85 b5       	in	r24, 0x25	; 37
 862:	8e 7f       	andi	r24, 0xFE	; 254
 864:	85 bd       	out	0x25, r24	; 37
 866:	81 e0       	ldi	r24, 0x01	; 1
 868:	08 95       	ret
 86a:	85 b5       	in	r24, 0x25	; 37
 86c:	84 60       	ori	r24, 0x04	; 4
 86e:	85 bd       	out	0x25, r24	; 37
 870:	85 b5       	in	r24, 0x25	; 37
 872:	82 60       	ori	r24, 0x02	; 2
 874:	85 bd       	out	0x25, r24	; 37
 876:	85 b5       	in	r24, 0x25	; 37
 878:	81 60       	ori	r24, 0x01	; 1
 87a:	85 bd       	out	0x25, r24	; 37
 87c:	81 e0       	ldi	r24, 0x01	; 1
 87e:	08 95       	ret
 880:	80 e0       	ldi	r24, 0x00	; 0
 882:	08 95       	ret
 884:	80 e0       	ldi	r24, 0x00	; 0
 886:	08 95       	ret
 888:	80 e0       	ldi	r24, 0x00	; 0
 88a:	08 95       	ret
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	08 95       	ret
 890:	80 e0       	ldi	r24, 0x00	; 0
 892:	08 95       	ret
 894:	80 e0       	ldi	r24, 0x00	; 0
 896:	08 95       	ret
 898:	80 e0       	ldi	r24, 0x00	; 0
 89a:	08 95       	ret
 89c:	80 e0       	ldi	r24, 0x00	; 0
 89e:	08 95       	ret
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	08 95       	ret
 8a4:	80 e0       	ldi	r24, 0x00	; 0
 8a6:	08 95       	ret

000008a8 <Timer_Stop>:
 8a8:	81 30       	cpi	r24, 0x01	; 1
 8aa:	99 f0       	breq	.+38     	; 0x8d2 <Timer_Stop+0x2a>
 8ac:	18 f0       	brcs	.+6      	; 0x8b4 <Timer_Stop+0xc>
 8ae:	82 30       	cpi	r24, 0x02	; 2
 8b0:	f9 f0       	breq	.+62     	; 0x8f0 <Timer_Stop+0x48>
 8b2:	2d c0       	rjmp	.+90     	; 0x90e <Timer_Stop+0x66>
 8b4:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gsau8_initState>
 8b8:	81 30       	cpi	r24, 0x01	; 1
 8ba:	59 f5       	brne	.+86     	; 0x912 <Timer_Stop+0x6a>
 8bc:	83 b7       	in	r24, 0x33	; 51
 8be:	84 60       	ori	r24, 0x04	; 4
 8c0:	83 bf       	out	0x33, r24	; 51
 8c2:	83 b7       	in	r24, 0x33	; 51
 8c4:	82 60       	ori	r24, 0x02	; 2
 8c6:	83 bf       	out	0x33, r24	; 51
 8c8:	83 b7       	in	r24, 0x33	; 51
 8ca:	81 60       	ori	r24, 0x01	; 1
 8cc:	83 bf       	out	0x33, r24	; 51
 8ce:	81 e0       	ldi	r24, 0x01	; 1
 8d0:	08 95       	ret
 8d2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gsau8_initState+0x1>
 8d6:	81 30       	cpi	r24, 0x01	; 1
 8d8:	f1 f4       	brne	.+60     	; 0x916 <Timer_Stop+0x6e>
 8da:	83 b7       	in	r24, 0x33	; 51
 8dc:	8b 7f       	andi	r24, 0xFB	; 251
 8de:	83 bf       	out	0x33, r24	; 51
 8e0:	83 b7       	in	r24, 0x33	; 51
 8e2:	8d 7f       	andi	r24, 0xFD	; 253
 8e4:	83 bf       	out	0x33, r24	; 51
 8e6:	83 b7       	in	r24, 0x33	; 51
 8e8:	8e 7f       	andi	r24, 0xFE	; 254
 8ea:	83 bf       	out	0x33, r24	; 51
 8ec:	81 e0       	ldi	r24, 0x01	; 1
 8ee:	08 95       	ret
 8f0:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gsau8_initState+0x2>
 8f4:	81 30       	cpi	r24, 0x01	; 1
 8f6:	89 f4       	brne	.+34     	; 0x91a <Timer_Stop+0x72>
 8f8:	85 b5       	in	r24, 0x25	; 37
 8fa:	8e 7f       	andi	r24, 0xFE	; 254
 8fc:	85 bd       	out	0x25, r24	; 37
 8fe:	85 b5       	in	r24, 0x25	; 37
 900:	8b 7f       	andi	r24, 0xFB	; 251
 902:	85 bd       	out	0x25, r24	; 37
 904:	85 b5       	in	r24, 0x25	; 37
 906:	8d 7f       	andi	r24, 0xFD	; 253
 908:	85 bd       	out	0x25, r24	; 37
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	08 95       	ret
 90e:	80 e0       	ldi	r24, 0x00	; 0
 910:	08 95       	ret
 912:	80 e0       	ldi	r24, 0x00	; 0
 914:	08 95       	ret
 916:	80 e0       	ldi	r24, 0x00	; 0
 918:	08 95       	ret
 91a:	80 e0       	ldi	r24, 0x00	; 0
 91c:	08 95       	ret

0000091e <Timer_SetValue>:


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
	switch(Timer_CH)
 91e:	81 30       	cpi	r24, 0x01	; 1
 920:	49 f0       	breq	.+18     	; 0x934 <Timer_SetValue+0x16>
 922:	18 f0       	brcs	.+6      	; 0x92a <Timer_SetValue+0xc>
 924:	82 30       	cpi	r24, 0x02	; 2
 926:	69 f0       	breq	.+26     	; 0x942 <Timer_SetValue+0x24>
 928:	11 c0       	rjmp	.+34     	; 0x94c <Timer_SetValue+0x2e>
	{
		case TIMER_0:
		          TCNT0=*Data;
 92a:	fb 01       	movw	r30, r22
 92c:	80 81       	ld	r24, Z
 92e:	82 bf       	out	0x32, r24	; 50
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 930:	81 e0       	ldi	r24, 0x01	; 1
	switch(Timer_CH)
	{
		case TIMER_0:
		          TCNT0=*Data;
				  break; 
 932:	08 95       	ret
		case TIMER_1:
		           TCNT1=*Data;
 934:	fb 01       	movw	r30, r22
 936:	80 81       	ld	r24, Z
 938:	90 e0       	ldi	r25, 0x00	; 0
 93a:	9d bd       	out	0x2d, r25	; 45
 93c:	8c bd       	out	0x2c, r24	; 44
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 93e:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_0:
		          TCNT0=*Data;
				  break; 
		case TIMER_1:
		           TCNT1=*Data;
		           break;
 940:	08 95       	ret
		case TIMER_2:
		           TCNT2=*Data;
 942:	fb 01       	movw	r30, r22
 944:	80 81       	ld	r24, Z
 946:	84 bd       	out	0x24, r24	; 36
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 948:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_1:
		           TCNT1=*Data;
		           break;
		case TIMER_2:
		           TCNT2=*Data;
		           break;
 94a:	08 95       	ret
		default:
		       ERROR=E_NOK;
 94c:	80 e0       	ldi	r24, 0x00	; 0
			   break;
	}
	
	return ERROR;
}
 94e:	08 95       	ret

00000950 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
 950:	1f 92       	push	r1
 952:	0f 92       	push	r0
 954:	0f b6       	in	r0, 0x3f	; 63
 956:	0f 92       	push	r0
 958:	11 24       	eor	r1, r1
 95a:	8f 93       	push	r24
 95c:	9f 93       	push	r25
 95e:	af 93       	push	r26
 960:	bf 93       	push	r27
   gu_timer_count1++;
 962:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <gu_timer_count1>
 966:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <gu_timer_count1+0x1>
 96a:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <gu_timer_count1+0x2>
 96e:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <gu_timer_count1+0x3>
 972:	01 96       	adiw	r24, 0x01	; 1
 974:	a1 1d       	adc	r26, r1
 976:	b1 1d       	adc	r27, r1
 978:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <gu_timer_count1>
 97c:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <gu_timer_count1+0x1>
 980:	a0 93 84 00 	sts	0x0084, r26	; 0x800084 <gu_timer_count1+0x2>
 984:	b0 93 85 00 	sts	0x0085, r27	; 0x800085 <gu_timer_count1+0x3>
 988:	bf 91       	pop	r27
 98a:	af 91       	pop	r26
 98c:	9f 91       	pop	r25
 98e:	8f 91       	pop	r24
 990:	0f 90       	pop	r0
 992:	0f be       	out	0x3f, r0	; 63
 994:	0f 90       	pop	r0
 996:	1f 90       	pop	r1
 998:	18 95       	reti

0000099a <__tablejump2__>:
 99a:	ee 0f       	add	r30, r30
 99c:	ff 1f       	adc	r31, r31
 99e:	05 90       	lpm	r0, Z+
 9a0:	f4 91       	lpm	r31, Z
 9a2:	e0 2d       	mov	r30, r0
 9a4:	09 94       	ijmp

000009a6 <_exit>:
 9a6:	f8 94       	cli

000009a8 <__stop_program>:
 9a8:	ff cf       	rjmp	.-2      	; 0x9a8 <__stop_program>
