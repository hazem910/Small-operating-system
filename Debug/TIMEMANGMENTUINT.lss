
TIMEMANGMENTUINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000009a0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000009a0  00000a34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  00800062  00800062  00000a36  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a36  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000a68  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  00000aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012b6  00000000  00000000  00000bc4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e4  00000000  00000000  00001e7a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001276  00000000  00000000  0000285e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000220  00000000  00000000  00003ad4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e49  00000000  00000000  00003cf4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000d2d  00000000  00000000  00007b3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  0000886a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0000124f  00000000  00000000  0000895a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	30 c0       	rjmp	.+96     	; 0x62 <__ctors_end>
   2:	00 00       	nop
   4:	49 c0       	rjmp	.+146    	; 0x98 <__bad_interrupt>
   6:	00 00       	nop
   8:	47 c0       	rjmp	.+142    	; 0x98 <__bad_interrupt>
   a:	00 00       	nop
   c:	45 c0       	rjmp	.+138    	; 0x98 <__bad_interrupt>
   e:	00 00       	nop
  10:	43 c0       	rjmp	.+134    	; 0x98 <__bad_interrupt>
  12:	00 00       	nop
  14:	41 c0       	rjmp	.+130    	; 0x98 <__bad_interrupt>
  16:	00 00       	nop
  18:	3f c0       	rjmp	.+126    	; 0x98 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3d c0       	rjmp	.+122    	; 0x98 <__bad_interrupt>
  1e:	00 00       	nop
  20:	3b c0       	rjmp	.+118    	; 0x98 <__bad_interrupt>
  22:	00 00       	nop
  24:	39 c0       	rjmp	.+114    	; 0x98 <__bad_interrupt>
  26:	00 00       	nop
  28:	37 c0       	rjmp	.+110    	; 0x98 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	8c c4       	rjmp	.+2328   	; 0x946 <__vector_11>
  2e:	00 00       	nop
  30:	33 c0       	rjmp	.+102    	; 0x98 <__bad_interrupt>
  32:	00 00       	nop
  34:	31 c0       	rjmp	.+98     	; 0x98 <__bad_interrupt>
  36:	00 00       	nop
  38:	2f c0       	rjmp	.+94     	; 0x98 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2d c0       	rjmp	.+90     	; 0x98 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2b c0       	rjmp	.+86     	; 0x98 <__bad_interrupt>
  42:	00 00       	nop
  44:	29 c0       	rjmp	.+82     	; 0x98 <__bad_interrupt>
  46:	00 00       	nop
  48:	27 c0       	rjmp	.+78     	; 0x98 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	25 c0       	rjmp	.+74     	; 0x98 <__bad_interrupt>
  4e:	00 00       	nop
  50:	23 c0       	rjmp	.+70     	; 0x98 <__bad_interrupt>
  52:	00 00       	nop
  54:	ee 03       	fmulsu	r22, r22
  56:	f9 03       	fmulsu	r23, r17
  58:	04 04       	cpc	r0, r4
  5a:	0f 04       	cpc	r0, r15
  5c:	1a 04       	cpc	r1, r10
  5e:	25 04       	cpc	r2, r5
  60:	30 04       	cpc	r3, r0

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e0 ea       	ldi	r30, 0xA0	; 160
  76:	f9 e0       	ldi	r31, 0x09	; 9
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a2 36       	cpi	r26, 0x62	; 98
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a2 e6       	ldi	r26, 0x62	; 98
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	ae 38       	cpi	r26, 0x8E	; 142
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	03 d2       	rcall	.+1030   	; 0x49c <main>
  96:	82 c4       	rjmp	.+2308   	; 0x99c <_exit>

00000098 <__bad_interrupt>:
  98:	b3 cf       	rjmp	.-154    	; 0x0 <__vectors>

0000009a <DIO_init>:
            break;
   }

   
   return ERROR;
}
  9a:	fc 01       	movw	r30, r24
  9c:	89 2b       	or	r24, r25
  9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_init+0x8>
  a0:	51 c0       	rjmp	.+162    	; 0x144 <DIO_init+0xaa>
  a2:	80 81       	ld	r24, Z
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	c1 f0       	breq	.+48     	; 0xd8 <DIO_init+0x3e>
  a8:	28 f0       	brcs	.+10     	; 0xb4 <DIO_init+0x1a>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	39 f1       	breq	.+78     	; 0xfc <DIO_init+0x62>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	b9 f1       	breq	.+110    	; 0x120 <DIO_init+0x86>
  b2:	4a c0       	rjmp	.+148    	; 0x148 <DIO_init+0xae>
  b4:	82 81       	ldd	r24, Z+2	; 0x02
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	31 f4       	brne	.+12     	; 0xc6 <DIO_init+0x2c>
  ba:	9a b3       	in	r25, 0x1a	; 26
  bc:	81 81       	ldd	r24, Z+1	; 0x01
  be:	89 2b       	or	r24, r25
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	08 95       	ret
  c6:	81 11       	cpse	r24, r1
  c8:	41 c0       	rjmp	.+130    	; 0x14c <DIO_init+0xb2>
  ca:	9a b3       	in	r25, 0x1a	; 26
  cc:	81 81       	ldd	r24, Z+1	; 0x01
  ce:	80 95       	com	r24
  d0:	89 23       	and	r24, r25
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
  d8:	82 81       	ldd	r24, Z+2	; 0x02
  da:	8f 3f       	cpi	r24, 0xFF	; 255
  dc:	31 f4       	brne	.+12     	; 0xea <DIO_init+0x50>
  de:	97 b3       	in	r25, 0x17	; 23
  e0:	81 81       	ldd	r24, Z+1	; 0x01
  e2:	89 2b       	or	r24, r25
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret
  ea:	81 11       	cpse	r24, r1
  ec:	31 c0       	rjmp	.+98     	; 0x150 <DIO_init+0xb6>
  ee:	97 b3       	in	r25, 0x17	; 23
  f0:	81 81       	ldd	r24, Z+1	; 0x01
  f2:	80 95       	com	r24
  f4:	89 23       	and	r24, r25
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	08 95       	ret
  fc:	82 81       	ldd	r24, Z+2	; 0x02
  fe:	8f 3f       	cpi	r24, 0xFF	; 255
 100:	31 f4       	brne	.+12     	; 0x10e <DIO_init+0x74>
 102:	94 b3       	in	r25, 0x14	; 20
 104:	81 81       	ldd	r24, Z+1	; 0x01
 106:	89 2b       	or	r24, r25
 108:	84 bb       	out	0x14, r24	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret
 10e:	81 11       	cpse	r24, r1
 110:	21 c0       	rjmp	.+66     	; 0x154 <DIO_init+0xba>
 112:	94 b3       	in	r25, 0x14	; 20
 114:	81 81       	ldd	r24, Z+1	; 0x01
 116:	80 95       	com	r24
 118:	89 23       	and	r24, r25
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret
 120:	82 81       	ldd	r24, Z+2	; 0x02
 122:	8f 3f       	cpi	r24, 0xFF	; 255
 124:	31 f4       	brne	.+12     	; 0x132 <DIO_init+0x98>
 126:	91 b3       	in	r25, 0x11	; 17
 128:	81 81       	ldd	r24, Z+1	; 0x01
 12a:	89 2b       	or	r24, r25
 12c:	81 bb       	out	0x11, r24	; 17
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
 132:	81 11       	cpse	r24, r1
 134:	11 c0       	rjmp	.+34     	; 0x158 <DIO_init+0xbe>
 136:	91 b3       	in	r25, 0x11	; 17
 138:	81 81       	ldd	r24, Z+1	; 0x01
 13a:	80 95       	com	r24
 13c:	89 23       	and	r24, r25
 13e:	81 bb       	out	0x11, r24	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 95       	ret
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 95       	ret
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret

0000015c <DIO_Write>:
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	a9 f0       	breq	.+42     	; 0x18a <DIO_Write+0x2e>
 160:	28 f0       	brcs	.+10     	; 0x16c <DIO_Write+0x10>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	09 f1       	breq	.+66     	; 0x1a8 <DIO_Write+0x4c>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	71 f1       	breq	.+92     	; 0x1c6 <DIO_Write+0x6a>
 16a:	3c c0       	rjmp	.+120    	; 0x1e4 <DIO_Write+0x88>
 16c:	4f 3f       	cpi	r20, 0xFF	; 255
 16e:	29 f4       	brne	.+10     	; 0x17a <DIO_Write+0x1e>
 170:	8b b3       	in	r24, 0x1b	; 27
 172:	68 2b       	or	r22, r24
 174:	6b bb       	out	0x1b, r22	; 27
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	08 95       	ret
 17a:	41 11       	cpse	r20, r1
 17c:	35 c0       	rjmp	.+106    	; 0x1e8 <DIO_Write+0x8c>
 17e:	8b b3       	in	r24, 0x1b	; 27
 180:	60 95       	com	r22
 182:	68 23       	and	r22, r24
 184:	6b bb       	out	0x1b, r22	; 27
 186:	81 e0       	ldi	r24, 0x01	; 1
 188:	08 95       	ret
 18a:	4f 3f       	cpi	r20, 0xFF	; 255
 18c:	29 f4       	brne	.+10     	; 0x198 <DIO_Write+0x3c>
 18e:	88 b3       	in	r24, 0x18	; 24
 190:	68 2b       	or	r22, r24
 192:	68 bb       	out	0x18, r22	; 24
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	08 95       	ret
 198:	41 11       	cpse	r20, r1
 19a:	28 c0       	rjmp	.+80     	; 0x1ec <DIO_Write+0x90>
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	60 95       	com	r22
 1a0:	68 23       	and	r22, r24
 1a2:	68 bb       	out	0x18, r22	; 24
 1a4:	81 e0       	ldi	r24, 0x01	; 1
 1a6:	08 95       	ret
 1a8:	4f 3f       	cpi	r20, 0xFF	; 255
 1aa:	29 f4       	brne	.+10     	; 0x1b6 <DIO_Write+0x5a>
 1ac:	85 b3       	in	r24, 0x15	; 21
 1ae:	68 2b       	or	r22, r24
 1b0:	65 bb       	out	0x15, r22	; 21
 1b2:	81 e0       	ldi	r24, 0x01	; 1
 1b4:	08 95       	ret
 1b6:	41 11       	cpse	r20, r1
 1b8:	1b c0       	rjmp	.+54     	; 0x1f0 <DIO_Write+0x94>
 1ba:	85 b3       	in	r24, 0x15	; 21
 1bc:	60 95       	com	r22
 1be:	68 23       	and	r22, r24
 1c0:	65 bb       	out	0x15, r22	; 21
 1c2:	81 e0       	ldi	r24, 0x01	; 1
 1c4:	08 95       	ret
 1c6:	4f 3f       	cpi	r20, 0xFF	; 255
 1c8:	29 f4       	brne	.+10     	; 0x1d4 <DIO_Write+0x78>
 1ca:	82 b3       	in	r24, 0x12	; 18
 1cc:	68 2b       	or	r22, r24
 1ce:	62 bb       	out	0x12, r22	; 18
 1d0:	81 e0       	ldi	r24, 0x01	; 1
 1d2:	08 95       	ret
 1d4:	41 11       	cpse	r20, r1
 1d6:	0e c0       	rjmp	.+28     	; 0x1f4 <DIO_Write+0x98>
 1d8:	82 b3       	in	r24, 0x12	; 18
 1da:	60 95       	com	r22
 1dc:	68 23       	and	r22, r24
 1de:	62 bb       	out	0x12, r22	; 18
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	08 95       	ret
 1e4:	80 e0       	ldi	r24, 0x00	; 0
 1e6:	08 95       	ret
 1e8:	80 e0       	ldi	r24, 0x00	; 0
 1ea:	08 95       	ret
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	08 95       	ret
 1f0:	80 e0       	ldi	r24, 0x00	; 0
 1f2:	08 95       	ret
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	08 95       	ret

000001f8 <DIO_Toggle>:
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
   
   switch (GPIO)
 1f8:	81 30       	cpi	r24, 0x01	; 1
 1fa:	59 f0       	breq	.+22     	; 0x212 <DIO_Toggle+0x1a>
 1fc:	28 f0       	brcs	.+10     	; 0x208 <DIO_Toggle+0x10>
 1fe:	82 30       	cpi	r24, 0x02	; 2
 200:	69 f0       	breq	.+26     	; 0x21c <DIO_Toggle+0x24>
 202:	83 30       	cpi	r24, 0x03	; 3
 204:	81 f0       	breq	.+32     	; 0x226 <DIO_Toggle+0x2e>
 206:	14 c0       	rjmp	.+40     	; 0x230 <DIO_Toggle+0x38>
   {
      case GPIOA:
            PORTA_DATA^=pins;
 208:	8b b3       	in	r24, 0x1b	; 27
 20a:	68 27       	eor	r22, r24
 20c:	6b bb       	out	0x1b, r22	; 27
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 20e:	81 e0       	ldi	r24, 0x01	; 1
   
   switch (GPIO)
   {
      case GPIOA:
            PORTA_DATA^=pins;
            break;
 210:	08 95       	ret
      case GPIOB:
            PORTB_DATA^=pins;
 212:	88 b3       	in	r24, 0x18	; 24
 214:	68 27       	eor	r22, r24
 216:	68 bb       	out	0x18, r22	; 24
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 218:	81 e0       	ldi	r24, 0x01	; 1
      case GPIOA:
            PORTA_DATA^=pins;
            break;
      case GPIOB:
            PORTB_DATA^=pins;
            break;
 21a:	08 95       	ret
      case GPIOC:
           PORTC_DATA^=pins;
 21c:	85 b3       	in	r24, 0x15	; 21
 21e:	68 27       	eor	r22, r24
 220:	65 bb       	out	0x15, r22	; 21
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 222:	81 e0       	ldi	r24, 0x01	; 1
      case GPIOB:
            PORTB_DATA^=pins;
            break;
      case GPIOC:
           PORTC_DATA^=pins;
           break;
 224:	08 95       	ret
      case GPIOD:
          PORTD_DATA^=pins;
 226:	82 b3       	in	r24, 0x12	; 18
 228:	68 27       	eor	r22, r24
 22a:	62 bb       	out	0x12, r22	; 18
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 22c:	81 e0       	ldi	r24, 0x01	; 1
      case GPIOC:
           PORTC_DATA^=pins;
           break;
      case GPIOD:
          PORTD_DATA^=pins;
          break;
 22e:	08 95       	ret
      default:
          EROR=E_NOK;
 230:	80 e0       	ldi	r24, 0x00	; 0
   }


   return EROR;
   
 232:	08 95       	ret

00000234 <TMU_Init>:
Synchronous
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
 234:	cf 93       	push	r28
 236:	df 93       	push	r29
 238:	00 d0       	rcall	.+0      	; 0x23a <TMU_Init+0x6>
 23a:	00 d0       	rcall	.+0      	; 0x23c <TMU_Init+0x8>
 23c:	cd b7       	in	r28, 0x3d	; 61
 23e:	de b7       	in	r29, 0x3e	; 62
   EnmTMUError_t status =E_OK;
   if(ConfigPtr==NULL)
 240:	00 97       	sbiw	r24, 0x00	; 0
 242:	99 f1       	breq	.+102    	; 0x2aa <TMU_Init+0x76>
   {
      status =TMU_INIT_NULL_POINTER;
   }
   else
   {
      if(gu8_multiple_init==initialized)
 244:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <gu8_multiple_init>
 248:	21 30       	cpi	r18, 0x01	; 1
 24a:	89 f1       	breq	.+98     	; 0x2ae <TMU_Init+0x7a>
 24c:	fc 01       	movw	r30, r24
      {
         status=TMU_MULTIPLE_INIT;
      }         
       else
       {     gu8_multiple_init=initialized; 
 24e:	21 e0       	ldi	r18, 0x01	; 1
 250:	20 93 77 00 	sts	0x0077, r18	; 0x800077 <gu8_multiple_init>
             g_res=ConfigPtr->RES;
            Timer_cfg_s instance={0};
 254:	19 82       	std	Y+1, r1	; 0x01
 256:	1a 82       	std	Y+2, r1	; 0x02
 258:	1b 82       	std	Y+3, r1	; 0x03
 25a:	1c 82       	std	Y+4, r1	; 0x04
            switch(ConfigPtr->TIMER_ID)
 25c:	81 81       	ldd	r24, Z+1	; 0x01
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	69 f0       	breq	.+26     	; 0x27c <TMU_Init+0x48>
 262:	18 f0       	brcs	.+6      	; 0x26a <TMU_Init+0x36>
 264:	82 30       	cpi	r24, 0x02	; 2
 266:	a1 f0       	breq	.+40     	; 0x290 <TMU_Init+0x5c>
 268:	1e c0       	rjmp	.+60     	; 0x2a6 <TMU_Init+0x72>
            {    
              case TIMER_0:
                     instance.Timer_CH=TIMER_0;
                     instance.Timer_Mode=TIMER_MODE;
                     instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	8b 83       	std	Y+3, r24	; 0x03
                     instance.Timer_Prescaler=TIMER_PRESCALER_64;
 26e:	84 e0       	ldi	r24, 0x04	; 4
 270:	8c 83       	std	Y+4, r24	; 0x04
                     Timer_Init(&instance);
 272:	ce 01       	movw	r24, r28
 274:	01 96       	adiw	r24, 0x01	; 1
 276:	42 d1       	rcall	.+644    	; 0x4fc <Timer_Init>
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
   EnmTMUError_t status =E_OK;
 278:	81 e0       	ldi	r24, 0x01	; 1
                     instance.Timer_CH=TIMER_0;
                     instance.Timer_Mode=TIMER_MODE;
                     instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
                     instance.Timer_Prescaler=TIMER_PRESCALER_64;
                     Timer_Init(&instance);
                     break;
 27a:	1a c0       	rjmp	.+52     	; 0x2b0 <TMU_Init+0x7c>
               case TIMER_1:
                     instance.Timer_CH=TIMER_1;
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	89 83       	std	Y+1, r24	; 0x01
                     instance.Timer_Mode=TIMER_MODE;
                     instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
 280:	8b 83       	std	Y+3, r24	; 0x03
                     instance.Timer_Prescaler=TIMER_PRESCALER_64;
 282:	84 e0       	ldi	r24, 0x04	; 4
 284:	8c 83       	std	Y+4, r24	; 0x04
                     Timer_Init(&instance);
 286:	ce 01       	movw	r24, r28
 288:	01 96       	adiw	r24, 0x01	; 1
 28a:	38 d1       	rcall	.+624    	; 0x4fc <Timer_Init>
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
   EnmTMUError_t status =E_OK;
 28c:	81 e0       	ldi	r24, 0x01	; 1
                     instance.Timer_CH=TIMER_1;
                     instance.Timer_Mode=TIMER_MODE;
                     instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
                     instance.Timer_Prescaler=TIMER_PRESCALER_64;
                     Timer_Init(&instance);
                     break;
 28e:	10 c0       	rjmp	.+32     	; 0x2b0 <TMU_Init+0x7c>
               case TIMER_2:
                      instance.Timer_CH=TIMER_2;
 290:	82 e0       	ldi	r24, 0x02	; 2
 292:	89 83       	std	Y+1, r24	; 0x01
                      instance.Timer_Mode=TIMER_MODE;
                      instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
 294:	81 e0       	ldi	r24, 0x01	; 1
 296:	8b 83       	std	Y+3, r24	; 0x03
                      instance.Timer_Prescaler=TIMER_PRESCALER_64;
 298:	84 e0       	ldi	r24, 0x04	; 4
 29a:	8c 83       	std	Y+4, r24	; 0x04
                      Timer_Init(&instance);
 29c:	ce 01       	movw	r24, r28
 29e:	01 96       	adiw	r24, 0x01	; 1
 2a0:	2d d1       	rcall	.+602    	; 0x4fc <Timer_Init>
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
   EnmTMUError_t status =E_OK;
 2a2:	81 e0       	ldi	r24, 0x01	; 1
                      instance.Timer_CH=TIMER_2;
                      instance.Timer_Mode=TIMER_MODE;
                      instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
                      instance.Timer_Prescaler=TIMER_PRESCALER_64;
                      Timer_Init(&instance);
                      break;
 2a4:	05 c0       	rjmp	.+10     	; 0x2b0 <TMU_Init+0x7c>
               default:
                      status =E_NOK;
 2a6:	80 e0       	ldi	r24, 0x00	; 0
 2a8:	03 c0       	rjmp	.+6      	; 0x2b0 <TMU_Init+0x7c>
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
   EnmTMUError_t status =E_OK;
   if(ConfigPtr==NULL)
   {
      status =TMU_INIT_NULL_POINTER;
 2aa:	86 ef       	ldi	r24, 0xF6	; 246
 2ac:	01 c0       	rjmp	.+2      	; 0x2b0 <TMU_Init+0x7c>
   }
   else
   {
      if(gu8_multiple_init==initialized)
      {
         status=TMU_MULTIPLE_INIT;
 2ae:	87 ef       	ldi	r24, 0xF7	; 247
                      break;
            }
          }                                                   
      }
   return status;
}
 2b0:	0f 90       	pop	r0
 2b2:	0f 90       	pop	r0
 2b4:	0f 90       	pop	r0
 2b6:	0f 90       	pop	r0
 2b8:	df 91       	pop	r29
 2ba:	cf 91       	pop	r28
 2bc:	08 95       	ret

000002be <TMU_Start_Timer>:
Parameters (out):
Parameters (inOut):
Return:*/

EnmTMUError_t TMU_Start_Timer(uint16_t time,ptrtotask_CBK_FUNC ptrtofun,uint8_t periodicORoneshot)
{   EnmTMUError_t status=E_OK;
 2be:	9c 01       	movw	r18, r24
   if(gu8_multiple_init==not_init)
 2c0:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <gu8_multiple_init>
 2c4:	99 23       	and	r25, r25
 2c6:	19 f1       	breq	.+70     	; 0x30e <TMU_Start_Timer+0x50>
   {
      status=TMU_MODULE_NOT_INIT;
   }
else
{   
         if(gs_arraycount<BUFFER_SIZE)
 2c8:	90 91 78 00 	lds	r25, 0x0078	; 0x800078 <gs_arraycount>
 2cc:	93 30       	cpi	r25, 0x03	; 3
 2ce:	08 f5       	brcc	.+66     	; 0x312 <TMU_Start_Timer+0x54>
         {
            if((periodicORoneshot!=PERIODIC)&&(periodicORoneshot!=ONESHOT))
 2d0:	42 30       	cpi	r20, 0x02	; 2
 2d2:	08 f5       	brcc	.+66     	; 0x316 <TMU_Start_Timer+0x58>
            {
               status=TMU_NOT_PERODICORONESHOT;
            }               
            else
            {
              if(ptrtofun==NULL)
 2d4:	61 15       	cp	r22, r1
 2d6:	71 05       	cpc	r23, r1
 2d8:	01 f1       	breq	.+64     	; 0x31a <TMU_Start_Timer+0x5c>
              {
                 status=TMU_FUN_NULL_POINTER;
              }
              else
              {
                    gstr_arrayoftasks[gs_arraycount].delay=time;
 2da:	87 e0       	ldi	r24, 0x07	; 7
 2dc:	98 9f       	mul	r25, r24
 2de:	f0 01       	movw	r30, r0
 2e0:	11 24       	eor	r1, r1
 2e2:	ee 59       	subi	r30, 0x9E	; 158
 2e4:	ff 4f       	sbci	r31, 0xFF	; 255
 2e6:	32 83       	std	Z+2, r19	; 0x02
 2e8:	21 83       	std	Z+1, r18	; 0x01
                    gstr_arrayoftasks[gs_arraycount].Ptrtotask=ptrtofun;
 2ea:	74 83       	std	Z+4, r23	; 0x04
 2ec:	63 83       	std	Z+3, r22	; 0x03
                    gstr_arrayoftasks[gs_arraycount].perodicity=periodicORoneshot;
 2ee:	40 83       	st	Z, r20
                    gstr_arrayoftasks[gs_arraycount].delay_milistone=0;
 2f0:	16 82       	std	Z+6, r1	; 0x06
 2f2:	15 82       	std	Z+5, r1	; 0x05
  
                    if(gs_arraycount==0)
 2f4:	91 11       	cpse	r25, r1
 2f6:	04 c0       	rjmp	.+8      	; 0x300 <TMU_Start_Timer+0x42>
                    {
                       Timer_Start(TMU_TIMER_ID,6);  
 2f8:	66 e0       	ldi	r22, 0x06	; 6
 2fa:	70 e0       	ldi	r23, 0x00	; 0
 2fc:	80 e0       	ldi	r24, 0x00	; 0
 2fe:	68 d1       	rcall	.+720    	; 0x5d0 <Timer_Start>
                    }

                  gs_arraycount++;
 300:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gs_arraycount>
 304:	8f 5f       	subi	r24, 0xFF	; 255
 306:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <gs_arraycount>
Parameters (out):
Parameters (inOut):
Return:*/

EnmTMUError_t TMU_Start_Timer(uint16_t time,ptrtotask_CBK_FUNC ptrtofun,uint8_t periodicORoneshot)
{   EnmTMUError_t status=E_OK;
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	08 95       	ret
   if(gu8_multiple_init==not_init)
   {
      status=TMU_MODULE_NOT_INIT;
 30e:	88 ef       	ldi	r24, 0xF8	; 248
 310:	08 95       	ret
              }           
            }                    
         } 
         else
         {
            status=E_NOK;
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	08 95       	ret
{   
         if(gs_arraycount<BUFFER_SIZE)
         {
            if((periodicORoneshot!=PERIODIC)&&(periodicORoneshot!=ONESHOT))
            {
               status=TMU_NOT_PERODICORONESHOT;
 316:	8a ef       	ldi	r24, 0xFA	; 250
 318:	08 95       	ret
            }               
            else
            {
              if(ptrtofun==NULL)
              {
                 status=TMU_FUN_NULL_POINTER;
 31a:	8b ef       	ldi	r24, 0xFB	; 251
         {
            status=E_NOK;
         }
}                  
return status;
}
 31c:	08 95       	ret

0000031e <TMU_Stop_Timer>:
* @brief: TMU Stop
* @param: ptrFun: pointer to callback function
* @return: EnmTMUError_t status code with error code if one occurred
*/
EnmTMUError_t TMU_Stop_Timer(void (*ptrtofun)(void))
{
 31e:	1f 93       	push	r17
 320:	cf 93       	push	r28
 322:	df 93       	push	r29
 324:	ac 01       	movw	r20, r24
 326:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gs_arraycount>
 32a:	e2 e6       	ldi	r30, 0x62	; 98
 32c:	f0 e0       	ldi	r31, 0x00	; 0
   EnmTMUError_t status=E_OK;
   uint8_t au8_counter=0; 
   uint8_t Flag=0;
 32e:	10 e0       	ldi	r17, 0x00	; 0
   for(au8_counter=0;au8_counter<BUFFER_SIZE;au8_counter++)
 330:	90 e0       	ldi	r25, 0x00	; 0
   {
      if(gstr_arrayoftasks[au8_counter].Ptrtotask==ptrtofun)
      {   Flag=1;
 332:	61 e0       	ldi	r22, 0x01	; 1
            gstr_arrayoftasks[au8_counter].delay=0;
            gstr_arrayoftasks[au8_counter].perodicity=0;
         }
         else
         {
            gstr_arrayoftasks[au8_counter].Ptrtotask=gstr_arrayoftasks[BUFFER_SIZE-1].Ptrtotask;
 334:	ef 01       	movw	r28, r30
   EnmTMUError_t status=E_OK;
   uint8_t au8_counter=0; 
   uint8_t Flag=0;
   for(au8_counter=0;au8_counter<BUFFER_SIZE;au8_counter++)
   {
      if(gstr_arrayoftasks[au8_counter].Ptrtotask==ptrtofun)
 336:	23 81       	ldd	r18, Z+3	; 0x03
 338:	34 81       	ldd	r19, Z+4	; 0x04
 33a:	24 17       	cp	r18, r20
 33c:	35 07       	cpc	r19, r21
 33e:	09 f5       	brne	.+66     	; 0x382 <TMU_Stop_Timer+0x64>
      {   Flag=1;
         if(au8_counter==BUFFER_SIZE-1)
 340:	92 30       	cpi	r25, 0x02	; 2
 342:	41 f4       	brne	.+16     	; 0x354 <TMU_Stop_Timer+0x36>
         {
            gstr_arrayoftasks[au8_counter].Ptrtotask=NULL;
 344:	14 82       	std	Z+4, r1	; 0x04
 346:	13 82       	std	Z+3, r1	; 0x03
            gstr_arrayoftasks[au8_counter].delay_milistone=0;
 348:	16 82       	std	Z+6, r1	; 0x06
 34a:	15 82       	std	Z+5, r1	; 0x05
            gstr_arrayoftasks[au8_counter].delay=0;
 34c:	12 82       	std	Z+2, r1	; 0x02
 34e:	11 82       	std	Z+1, r1	; 0x01
            gstr_arrayoftasks[au8_counter].perodicity=0;
 350:	10 82       	st	Z, r1
 352:	15 c0       	rjmp	.+42     	; 0x37e <TMU_Stop_Timer+0x60>
         }
         else
         {
            gstr_arrayoftasks[au8_counter].Ptrtotask=gstr_arrayoftasks[BUFFER_SIZE-1].Ptrtotask;
 354:	29 89       	ldd	r18, Y+17	; 0x11
 356:	3a 89       	ldd	r19, Y+18	; 0x12
 358:	34 83       	std	Z+4, r19	; 0x04
 35a:	23 83       	std	Z+3, r18	; 0x03
            gstr_arrayoftasks[au8_counter].delay_milistone=gstr_arrayoftasks[BUFFER_SIZE-1].delay_milistone;
 35c:	2b 89       	ldd	r18, Y+19	; 0x13
 35e:	3c 89       	ldd	r19, Y+20	; 0x14
 360:	36 83       	std	Z+6, r19	; 0x06
 362:	25 83       	std	Z+5, r18	; 0x05
            gstr_arrayoftasks[au8_counter].delay=gstr_arrayoftasks[BUFFER_SIZE-1].delay;
 364:	2f 85       	ldd	r18, Y+15	; 0x0f
 366:	38 89       	ldd	r19, Y+16	; 0x10
 368:	32 83       	std	Z+2, r19	; 0x02
 36a:	21 83       	std	Z+1, r18	; 0x01
            gstr_arrayoftasks[au8_counter].perodicity=gstr_arrayoftasks[BUFFER_SIZE-1].perodicity;
 36c:	2e 85       	ldd	r18, Y+14	; 0x0e
 36e:	20 83       	st	Z, r18
            
            gstr_arrayoftasks[BUFFER_SIZE-1].Ptrtotask=NULL;
 370:	1a 8a       	std	Y+18, r1	; 0x12
 372:	19 8a       	std	Y+17, r1	; 0x11
            gstr_arrayoftasks[BUFFER_SIZE-1].delay_milistone=0;
 374:	1c 8a       	std	Y+20, r1	; 0x14
 376:	1b 8a       	std	Y+19, r1	; 0x13
            gstr_arrayoftasks[BUFFER_SIZE-1].delay=0;
 378:	18 8a       	std	Y+16, r1	; 0x10
 37a:	1f 86       	std	Y+15, r1	; 0x0f
            gstr_arrayoftasks[BUFFER_SIZE-1].perodicity=0;
 37c:	1e 86       	std	Y+14, r1	; 0x0e
         }
         gs_arraycount--;
 37e:	81 50       	subi	r24, 0x01	; 1
   uint8_t au8_counter=0; 
   uint8_t Flag=0;
   for(au8_counter=0;au8_counter<BUFFER_SIZE;au8_counter++)
   {
      if(gstr_arrayoftasks[au8_counter].Ptrtotask==ptrtofun)
      {   Flag=1;
 380:	16 2f       	mov	r17, r22
EnmTMUError_t TMU_Stop_Timer(void (*ptrtofun)(void))
{
   EnmTMUError_t status=E_OK;
   uint8_t au8_counter=0; 
   uint8_t Flag=0;
   for(au8_counter=0;au8_counter<BUFFER_SIZE;au8_counter++)
 382:	9f 5f       	subi	r25, 0xFF	; 255
 384:	37 96       	adiw	r30, 0x07	; 7
 386:	93 30       	cpi	r25, 0x03	; 3
 388:	b1 f6       	brne	.-84     	; 0x336 <TMU_Stop_Timer+0x18>
 38a:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <gs_arraycount>
         }
         gs_arraycount--;
      }
      
   }
   if(gs_arraycount==0)
 38e:	81 11       	cpse	r24, r1
 390:	01 c0       	rjmp	.+2      	; 0x394 <TMU_Stop_Timer+0x76>
   {
      Timer_Stop(TMU_TIMER_ID);
 392:	85 d2       	rcall	.+1290   	; 0x89e <Timer_Stop>
   }
  if(Flag==0)
 394:	11 11       	cpse	r17, r1
 396:	02 c0       	rjmp	.+4      	; 0x39c <TMU_Stop_Timer+0x7e>
  {
   status=TMU_BUFFER_IS_EMPTY;
 398:	89 ef       	ldi	r24, 0xF9	; 249
 39a:	01 c0       	rjmp	.+2      	; 0x39e <TMU_Stop_Timer+0x80>
* @param: ptrFun: pointer to callback function
* @return: EnmTMUError_t status code with error code if one occurred
*/
EnmTMUError_t TMU_Stop_Timer(void (*ptrtofun)(void))
{
   EnmTMUError_t status=E_OK;
 39c:	81 e0       	ldi	r24, 0x01	; 1
  if(Flag==0)
  {
   status=TMU_BUFFER_IS_EMPTY;
  }   
   return status;
}
 39e:	df 91       	pop	r29
 3a0:	cf 91       	pop	r28
 3a2:	1f 91       	pop	r17
 3a4:	08 95       	ret

000003a6 <TMU_Dispatch>:
* @return: EnmTMUError_t status code with error code if one occurred
*/


EnmTMUError_t TMU_Dispatch(void)
{
 3a6:	cf 92       	push	r12
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	1f 92       	push	r1
 3b8:	cd b7       	in	r28, 0x3d	; 61
 3ba:	de b7       	in	r29, 0x3e	; 62
   EnmTMUError_t status=E_OK;
   uint8_t u8_preloadtimer=6;
 3bc:	86 e0       	ldi	r24, 0x06	; 6
 3be:	89 83       	std	Y+1, r24	; 0x01
   
   if(gu_timer_count1>=RESOLUTION)
 3c0:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <gu_timer_count1>
 3c4:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <gu_timer_count1+0x1>
 3c8:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <gu_timer_count1+0x2>
 3cc:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <gu_timer_count1+0x3>
 3d0:	89 2b       	or	r24, r25
 3d2:	8a 2b       	or	r24, r26
 3d4:	8b 2b       	or	r24, r27
 3d6:	09 f4       	brne	.+2      	; 0x3da <TMU_Dispatch+0x34>
 3d8:	46 c0       	rjmp	.+140    	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
   { 
      gu_timer_count1=0;
 3da:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <gu_timer_count1>
 3de:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <gu_timer_count1+0x1>
 3e2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <gu_timer_count1+0x2>
 3e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <gu_timer_count1+0x3>
      
      Timer_SetValue(TMU_TIMER_ID,&u8_preloadtimer);
 3ea:	be 01       	movw	r22, r28
 3ec:	6f 5f       	subi	r22, 0xFF	; 255
 3ee:	7f 4f       	sbci	r23, 0xFF	; 255
 3f0:	80 e0       	ldi	r24, 0x00	; 0
 3f2:	90 d2       	rcall	.+1312   	; 0x914 <Timer_SetValue>
 3f4:	02 e6       	ldi	r16, 0x62	; 98
 3f6:	10 e0       	ldi	r17, 0x00	; 0
 3f8:	0f 2e       	mov	r0, r31
 3fa:	f7 e7       	ldi	r31, 0x77	; 119
 3fc:	ef 2e       	mov	r14, r31
 3fe:	f0 e0       	ldi	r31, 0x00	; 0
 400:	ff 2e       	mov	r15, r31
 402:	f0 2d       	mov	r31, r0
 404:	f8 01       	movw	r30, r16
      	/*Loop through Tasks in the array and increment milestones*/
      uint8_t u8_counter=0;
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
      {
         if(gstr_arrayoftasks[u8_counter].Ptrtotask==NULL)
 406:	83 81       	ldd	r24, Z+3	; 0x03
 408:	94 81       	ldd	r25, Z+4	; 0x04
 40a:	89 2b       	or	r24, r25
 40c:	29 f0       	breq	.+10     	; 0x418 <__LOCK_REGION_LENGTH__+0x18>
         {
            
         }
         else
         {
            gstr_arrayoftasks[u8_counter].delay_milistone++;
 40e:	85 81       	ldd	r24, Z+5	; 0x05
 410:	96 81       	ldd	r25, Z+6	; 0x06
 412:	01 96       	adiw	r24, 0x01	; 1
 414:	96 83       	std	Z+6, r25	; 0x06
 416:	85 83       	std	Z+5, r24	; 0x05
 418:	37 96       	adiw	r30, 0x07	; 7
      gu_timer_count1=0;
      
      Timer_SetValue(TMU_TIMER_ID,&u8_preloadtimer);
      	/*Loop through Tasks in the array and increment milestones*/
      uint8_t u8_counter=0;
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
 41a:	ee 15       	cp	r30, r14
 41c:	ff 05       	cpc	r31, r15
 41e:	99 f7       	brne	.-26     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
         }
      }
      /* Loop through  array of structure and handle each one */
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
      {
         if(gstr_arrayoftasks[u8_counter].Ptrtotask==NULL)
 420:	d8 01       	movw	r26, r16
 422:	13 96       	adiw	r26, 0x03	; 3
 424:	ed 91       	ld	r30, X+
 426:	fc 91       	ld	r31, X
 428:	14 97       	sbiw	r26, 0x04	; 4
 42a:	30 97       	sbiw	r30, 0x00	; 0
 42c:	b9 f0       	breq	.+46     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
         {
            
         }
         else
         {
            if(gstr_arrayoftasks[u8_counter].delay_milistone>=gstr_arrayoftasks[u8_counter].delay)
 42e:	15 96       	adiw	r26, 0x05	; 5
 430:	2d 91       	ld	r18, X+
 432:	3c 91       	ld	r19, X
 434:	16 97       	sbiw	r26, 0x06	; 6
 436:	11 96       	adiw	r26, 0x01	; 1
 438:	8d 91       	ld	r24, X+
 43a:	9c 91       	ld	r25, X
 43c:	12 97       	sbiw	r26, 0x02	; 2
 43e:	28 17       	cp	r18, r24
 440:	39 07       	cpc	r19, r25
 442:	60 f0       	brcs	.+24     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
             {
                gstr_arrayoftasks[u8_counter].delay_milistone=0;
 444:	16 96       	adiw	r26, 0x06	; 6
 446:	1c 92       	st	X, r1
 448:	1e 92       	st	-X, r1
 44a:	15 97       	sbiw	r26, 0x05	; 5
                gstr_arrayoftasks[u8_counter].Ptrtotask();
 44c:	09 95       	icall
                if(gstr_arrayoftasks[u8_counter].perodicity==ONESHOT)
 44e:	f8 01       	movw	r30, r16
 450:	80 81       	ld	r24, Z
 452:	81 11       	cpse	r24, r1
 454:	03 c0       	rjmp	.+6      	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
                {
                   TMU_Stop_Timer(gstr_arrayoftasks[u8_counter].Ptrtotask);
 456:	83 81       	ldd	r24, Z+3	; 0x03
 458:	94 81       	ldd	r25, Z+4	; 0x04
 45a:	61 df       	rcall	.-318    	; 0x31e <TMU_Stop_Timer>
 45c:	09 5f       	subi	r16, 0xF9	; 249
 45e:	1f 4f       	sbci	r17, 0xFF	; 255
         {
            gstr_arrayoftasks[u8_counter].delay_milistone++;
         }
      }
      /* Loop through  array of structure and handle each one */
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
 460:	0e 15       	cp	r16, r14
 462:	1f 05       	cpc	r17, r15
 464:	e9 f6       	brne	.-70     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
   else
   {
      
   }
   return status;
}
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	0f 90       	pop	r0
 46a:	df 91       	pop	r29
 46c:	cf 91       	pop	r28
 46e:	1f 91       	pop	r17
 470:	0f 91       	pop	r16
 472:	ff 90       	pop	r15
 474:	ef 90       	pop	r14
 476:	df 90       	pop	r13
 478:	cf 90       	pop	r12
 47a:	08 95       	ret

0000047c <func_call>:
   
   
}
void func_call(void)
{
   DIO_Toggle(GPIOA,PIN0);
 47c:	61 e0       	ldi	r22, 0x01	; 1
 47e:	80 e0       	ldi	r24, 0x00	; 0
 480:	bb ce       	rjmp	.-650    	; 0x1f8 <DIO_Toggle>
 482:	08 95       	ret

00000484 <func_call1>:
}

void func_call1(void)
{
   DIO_Toggle(GPIOA,PIN1);
 484:	62 e0       	ldi	r22, 0x02	; 2
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	b7 ce       	rjmp	.-658    	; 0x1f8 <DIO_Toggle>
 48a:	08 95       	ret

0000048c <func_call2>:
}

void func_call2(void)
{
   DIO_Toggle(GPIOA,PIN2);
 48c:	64 e0       	ldi	r22, 0x04	; 4
 48e:	80 e0       	ldi	r24, 0x00	; 0
 490:	b3 ce       	rjmp	.-666    	; 0x1f8 <DIO_Toggle>
 492:	08 95       	ret

00000494 <func_call3>:
}

void func_call3(void)
{
   DIO_Toggle(GPIOA,PIN3);
 494:	68 e0       	ldi	r22, 0x08	; 8
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	af ce       	rjmp	.-674    	; 0x1f8 <DIO_Toggle>
 49a:	08 95       	ret

0000049c <main>:

extern Task_BlockType gstr_arrayoftasks[BUFFER_SIZE];


int main(void)
{
 49c:	cf 93       	push	r28
 49e:	df 93       	push	r29
 4a0:	00 d0       	rcall	.+0      	; 0x4a2 <main+0x6>
 4a2:	1f 92       	push	r1
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
	sei();
 4a8:	78 94       	sei

   DIO_Cfg_s instanse={GPIOA,FULL_PORT,OUTPUT};
 4aa:	19 82       	std	Y+1, r1	; 0x01
 4ac:	8f ef       	ldi	r24, 0xFF	; 255
 4ae:	8a 83       	std	Y+2, r24	; 0x02
 4b0:	8b 83       	std	Y+3, r24	; 0x03


   DIO_init(&instanse);
 4b2:	ce 01       	movw	r24, r28
 4b4:	01 96       	adiw	r24, 0x01	; 1
 4b6:	f1 dd       	rcall	.-1054   	; 0x9a <DIO_init>
      }
   */

   /*test case2 (BUFFER_SIZE is 3)*/

   TMU_Init(&instans);
 4b8:	80 e6       	ldi	r24, 0x60	; 96
 4ba:	90 e0       	ldi	r25, 0x00	; 0
 4bc:	bb de       	rcall	.-650    	; 0x234 <TMU_Init>
   TMU_Start_Timer(1000,func_call,ONESHOT);
 4be:	40 e0       	ldi	r20, 0x00	; 0
 4c0:	6e e3       	ldi	r22, 0x3E	; 62
 4c2:	72 e0       	ldi	r23, 0x02	; 2
 4c4:	88 ee       	ldi	r24, 0xE8	; 232
 4c6:	93 e0       	ldi	r25, 0x03	; 3
 4c8:	fa de       	rcall	.-524    	; 0x2be <TMU_Start_Timer>
   TMU_Start_Timer(500,func_call1,PERIODIC);
 4ca:	41 e0       	ldi	r20, 0x01	; 1
 4cc:	62 e4       	ldi	r22, 0x42	; 66
 4ce:	72 e0       	ldi	r23, 0x02	; 2
 4d0:	84 ef       	ldi	r24, 0xF4	; 244
 4d2:	91 e0       	ldi	r25, 0x01	; 1
 4d4:	f4 de       	rcall	.-536    	; 0x2be <TMU_Start_Timer>
   TMU_Start_Timer(300,func_call2,PERIODIC);
 4d6:	41 e0       	ldi	r20, 0x01	; 1
 4d8:	66 e4       	ldi	r22, 0x46	; 70
 4da:	72 e0       	ldi	r23, 0x02	; 2
 4dc:	8c e2       	ldi	r24, 0x2C	; 44
 4de:	91 e0       	ldi	r25, 0x01	; 1
   TMU_Stop_Timer(func_call2);
 4e0:	ee de       	rcall	.-548    	; 0x2be <TMU_Start_Timer>
 4e2:	86 e4       	ldi	r24, 0x46	; 70
 4e4:	92 e0       	ldi	r25, 0x02	; 2
   if(TMU_Stop_Timer(func_call3)==E_NOK)
 4e6:	1b df       	rcall	.-458    	; 0x31e <TMU_Stop_Timer>
 4e8:	8a e4       	ldi	r24, 0x4A	; 74
 4ea:	92 e0       	ldi	r25, 0x02	; 2
 4ec:	18 df       	rcall	.-464    	; 0x31e <TMU_Stop_Timer>
   {
    DIO_Write(GPIOA,BIT7,HIGH);
 4ee:	81 11       	cpse	r24, r1
 4f0:	03 c0       	rjmp	.+6      	; 0x4f8 <main+0x5c>
 4f2:	4f ef       	ldi	r20, 0xFF	; 255
 4f4:	60 e8       	ldi	r22, 0x80	; 128
   
*/
 
   while(1)
   {
      TMU_Dispatch();
 4f6:	32 de       	rcall	.-924    	; 0x15c <DIO_Write>
 4f8:	56 df       	rcall	.-340    	; 0x3a6 <TMU_Dispatch>
 4fa:	fe cf       	rjmp	.-4      	; 0x4f8 <main+0x5c>

000004fc <Timer_Init>:
	else
	{
		ERROR=E_NOK;
	}
	return ERROR;
}
 4fc:	fc 01       	movw	r30, r24
 4fe:	89 2b       	or	r24, r25
 500:	09 f4       	brne	.+2      	; 0x504 <Timer_Init+0x8>
 502:	64 c0       	rjmp	.+200    	; 0x5cc <Timer_Init+0xd0>
 504:	30 81       	ld	r19, Z
 506:	83 2f       	mov	r24, r19
 508:	90 e0       	ldi	r25, 0x00	; 0
 50a:	dc 01       	movw	r26, r24
 50c:	a4 58       	subi	r26, 0x84	; 132
 50e:	bf 4f       	sbci	r27, 0xFF	; 255
 510:	23 81       	ldd	r18, Z+3	; 0x03
 512:	2c 93       	st	X, r18
 514:	21 81       	ldd	r18, Z+1	; 0x01
 516:	21 30       	cpi	r18, 0x01	; 1
 518:	09 f4       	brne	.+2      	; 0x51c <Timer_Init+0x20>
 51a:	46 c0       	rjmp	.+140    	; 0x5a8 <Timer_Init+0xac>
 51c:	20 f0       	brcs	.+8      	; 0x526 <Timer_Init+0x2a>
 51e:	22 30       	cpi	r18, 0x02	; 2
 520:	09 f4       	brne	.+2      	; 0x524 <Timer_Init+0x28>
 522:	48 c0       	rjmp	.+144    	; 0x5b4 <Timer_Init+0xb8>
 524:	4c c0       	rjmp	.+152    	; 0x5be <Timer_Init+0xc2>
 526:	31 30       	cpi	r19, 0x01	; 1
 528:	91 f0       	breq	.+36     	; 0x54e <Timer_Init+0x52>
 52a:	18 f0       	brcs	.+6      	; 0x532 <Timer_Init+0x36>
 52c:	32 30       	cpi	r19, 0x02	; 2
 52e:	31 f1       	breq	.+76     	; 0x57c <Timer_Init+0x80>
 530:	35 c0       	rjmp	.+106    	; 0x59c <Timer_Init+0xa0>
 532:	83 b7       	in	r24, 0x33	; 51
 534:	88 7f       	andi	r24, 0xF8	; 248
 536:	83 bf       	out	0x33, r24	; 51
 538:	82 81       	ldd	r24, Z+2	; 0x02
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	21 f4       	brne	.+8      	; 0x546 <Timer_Init+0x4a>
 53e:	89 b7       	in	r24, 0x39	; 57
 540:	81 60       	ori	r24, 0x01	; 1
 542:	89 bf       	out	0x39, r24	; 57
 544:	2b c0       	rjmp	.+86     	; 0x59c <Timer_Init+0xa0>
 546:	89 b7       	in	r24, 0x39	; 57
 548:	8e 7f       	andi	r24, 0xFE	; 254
 54a:	89 bf       	out	0x39, r24	; 57
 54c:	27 c0       	rjmp	.+78     	; 0x59c <Timer_Init+0xa0>
 54e:	8f b5       	in	r24, 0x2f	; 47
 550:	8d 7f       	andi	r24, 0xFD	; 253
 552:	8f bd       	out	0x2f, r24	; 47
 554:	8f b5       	in	r24, 0x2f	; 47
 556:	8e 7f       	andi	r24, 0xFE	; 254
 558:	8f bd       	out	0x2f, r24	; 47
 55a:	8e b5       	in	r24, 0x2e	; 46
 55c:	87 7f       	andi	r24, 0xF7	; 247
 55e:	8e bd       	out	0x2e, r24	; 46
 560:	8e b5       	in	r24, 0x2e	; 46
 562:	8f 7e       	andi	r24, 0xEF	; 239
 564:	8e bd       	out	0x2e, r24	; 46
 566:	82 81       	ldd	r24, Z+2	; 0x02
 568:	81 11       	cpse	r24, r1
 56a:	04 c0       	rjmp	.+8      	; 0x574 <Timer_Init+0x78>
 56c:	89 b7       	in	r24, 0x39	; 57
 56e:	8e 7f       	andi	r24, 0xFE	; 254
 570:	89 bf       	out	0x39, r24	; 57
 572:	14 c0       	rjmp	.+40     	; 0x59c <Timer_Init+0xa0>
 574:	89 b7       	in	r24, 0x39	; 57
 576:	81 60       	ori	r24, 0x01	; 1
 578:	89 bf       	out	0x39, r24	; 57
 57a:	10 c0       	rjmp	.+32     	; 0x59c <Timer_Init+0xa0>
 57c:	85 b5       	in	r24, 0x25	; 37
 57e:	87 7f       	andi	r24, 0xF7	; 247
 580:	85 bd       	out	0x25, r24	; 37
 582:	85 b5       	in	r24, 0x25	; 37
 584:	8f 7b       	andi	r24, 0xBF	; 191
 586:	85 bd       	out	0x25, r24	; 37
 588:	82 81       	ldd	r24, Z+2	; 0x02
 58a:	81 11       	cpse	r24, r1
 58c:	04 c0       	rjmp	.+8      	; 0x596 <Timer_Init+0x9a>
 58e:	89 b7       	in	r24, 0x39	; 57
 590:	8e 7f       	andi	r24, 0xFE	; 254
 592:	89 bf       	out	0x39, r24	; 57
 594:	03 c0       	rjmp	.+6      	; 0x59c <Timer_Init+0xa0>
 596:	89 b7       	in	r24, 0x39	; 57
 598:	81 60       	ori	r24, 0x01	; 1
 59a:	89 bf       	out	0x39, r24	; 57
 59c:	a0 81       	ld	r26, Z
 59e:	b0 e0       	ldi	r27, 0x00	; 0
 5a0:	a1 58       	subi	r26, 0x81	; 129
 5a2:	bf 4f       	sbci	r27, 0xFF	; 255
 5a4:	1c 92       	st	X, r1
 5a6:	0b c0       	rjmp	.+22     	; 0x5be <Timer_Init+0xc2>
 5a8:	dc 01       	movw	r26, r24
 5aa:	a1 58       	subi	r26, 0x81	; 129
 5ac:	bf 4f       	sbci	r27, 0xFF	; 255
 5ae:	21 e0       	ldi	r18, 0x01	; 1
 5b0:	2c 93       	st	X, r18
 5b2:	05 c0       	rjmp	.+10     	; 0x5be <Timer_Init+0xc2>
 5b4:	dc 01       	movw	r26, r24
 5b6:	a1 58       	subi	r26, 0x81	; 129
 5b8:	bf 4f       	sbci	r27, 0xFF	; 255
 5ba:	22 e0       	ldi	r18, 0x02	; 2
 5bc:	2c 93       	st	X, r18
 5be:	e0 81       	ld	r30, Z
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	e7 58       	subi	r30, 0x87	; 135
 5c4:	ff 4f       	sbci	r31, 0xFF	; 255
 5c6:	81 e0       	ldi	r24, 0x01	; 1
 5c8:	80 83       	st	Z, r24
 5ca:	08 95       	ret
 5cc:	80 e0       	ldi	r24, 0x00	; 0
 5ce:	08 95       	ret

000005d0 <Timer_Start>:
 5d0:	81 30       	cpi	r24, 0x01	; 1
 5d2:	09 f4       	brne	.+2      	; 0x5d6 <Timer_Start+0x6>
 5d4:	77 c0       	rjmp	.+238    	; 0x6c4 <Timer_Start+0xf4>
 5d6:	20 f0       	brcs	.+8      	; 0x5e0 <Timer_Start+0x10>
 5d8:	82 30       	cpi	r24, 0x02	; 2
 5da:	09 f4       	brne	.+2      	; 0x5de <Timer_Start+0xe>
 5dc:	e2 c0       	rjmp	.+452    	; 0x7a2 <Timer_Start+0x1d2>
 5de:	4b c1       	rjmp	.+662    	; 0x876 <__stack+0x17>
 5e0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gsau8_initState>
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	09 f0       	breq	.+2      	; 0x5ea <Timer_Start+0x1a>
 5e8:	48 c1       	rjmp	.+656    	; 0x87a <__stack+0x1b>
 5ea:	62 bf       	out	0x32, r22	; 50
 5ec:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <gsau8_mode>
 5f0:	81 30       	cpi	r24, 0x01	; 1
 5f2:	09 f4       	brne	.+2      	; 0x5f6 <Timer_Start+0x26>
 5f4:	51 c0       	rjmp	.+162    	; 0x698 <Timer_Start+0xc8>
 5f6:	20 f0       	brcs	.+8      	; 0x600 <Timer_Start+0x30>
 5f8:	82 30       	cpi	r24, 0x02	; 2
 5fa:	09 f4       	brne	.+2      	; 0x5fe <Timer_Start+0x2e>
 5fc:	58 c0       	rjmp	.+176    	; 0x6ae <Timer_Start+0xde>
 5fe:	3f c1       	rjmp	.+638    	; 0x87e <__stack+0x1f>
 600:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gsau8_preScaler>
 604:	84 30       	cpi	r24, 0x04	; 4
 606:	09 f1       	breq	.+66     	; 0x64a <Timer_Start+0x7a>
 608:	28 f4       	brcc	.+10     	; 0x614 <Timer_Start+0x44>
 60a:	81 30       	cpi	r24, 0x01	; 1
 60c:	41 f0       	breq	.+16     	; 0x61e <Timer_Start+0x4e>
 60e:	82 30       	cpi	r24, 0x02	; 2
 610:	89 f0       	breq	.+34     	; 0x634 <Timer_Start+0x64>
 612:	37 c1       	rjmp	.+622    	; 0x882 <__stack+0x23>
 614:	86 30       	cpi	r24, 0x06	; 6
 616:	21 f1       	breq	.+72     	; 0x660 <Timer_Start+0x90>
 618:	87 30       	cpi	r24, 0x07	; 7
 61a:	69 f1       	breq	.+90     	; 0x676 <Timer_Start+0xa6>
 61c:	32 c1       	rjmp	.+612    	; 0x882 <__stack+0x23>
 61e:	83 b7       	in	r24, 0x33	; 51
 620:	8b 7f       	andi	r24, 0xFB	; 251
 622:	83 bf       	out	0x33, r24	; 51
 624:	83 b7       	in	r24, 0x33	; 51
 626:	8d 7f       	andi	r24, 0xFD	; 253
 628:	83 bf       	out	0x33, r24	; 51
 62a:	83 b7       	in	r24, 0x33	; 51
 62c:	81 60       	ori	r24, 0x01	; 1
 62e:	83 bf       	out	0x33, r24	; 51
 630:	81 e0       	ldi	r24, 0x01	; 1
 632:	08 95       	ret
 634:	83 b7       	in	r24, 0x33	; 51
 636:	8b 7f       	andi	r24, 0xFB	; 251
 638:	83 bf       	out	0x33, r24	; 51
 63a:	83 b7       	in	r24, 0x33	; 51
 63c:	8e 7f       	andi	r24, 0xFE	; 254
 63e:	83 bf       	out	0x33, r24	; 51
 640:	83 b7       	in	r24, 0x33	; 51
 642:	82 60       	ori	r24, 0x02	; 2
 644:	83 bf       	out	0x33, r24	; 51
 646:	81 e0       	ldi	r24, 0x01	; 1
 648:	08 95       	ret
 64a:	83 b7       	in	r24, 0x33	; 51
 64c:	8b 7f       	andi	r24, 0xFB	; 251
 64e:	83 bf       	out	0x33, r24	; 51
 650:	83 b7       	in	r24, 0x33	; 51
 652:	82 60       	ori	r24, 0x02	; 2
 654:	83 bf       	out	0x33, r24	; 51
 656:	83 b7       	in	r24, 0x33	; 51
 658:	81 60       	ori	r24, 0x01	; 1
 65a:	83 bf       	out	0x33, r24	; 51
 65c:	81 e0       	ldi	r24, 0x01	; 1
 65e:	08 95       	ret
 660:	83 b7       	in	r24, 0x33	; 51
 662:	8e 7f       	andi	r24, 0xFE	; 254
 664:	83 bf       	out	0x33, r24	; 51
 666:	83 b7       	in	r24, 0x33	; 51
 668:	8d 7f       	andi	r24, 0xFD	; 253
 66a:	83 bf       	out	0x33, r24	; 51
 66c:	83 b7       	in	r24, 0x33	; 51
 66e:	84 60       	ori	r24, 0x04	; 4
 670:	83 bf       	out	0x33, r24	; 51
 672:	81 e0       	ldi	r24, 0x01	; 1
 674:	08 95       	ret
 676:	83 b7       	in	r24, 0x33	; 51
 678:	81 60       	ori	r24, 0x01	; 1
 67a:	83 bf       	out	0x33, r24	; 51
 67c:	83 b7       	in	r24, 0x33	; 51
 67e:	8d 7f       	andi	r24, 0xFD	; 253
 680:	83 bf       	out	0x33, r24	; 51
 682:	83 b7       	in	r24, 0x33	; 51
 684:	84 60       	ori	r24, 0x04	; 4
 686:	83 bf       	out	0x33, r24	; 51
 688:	83 b7       	in	r24, 0x33	; 51
 68a:	8e 7f       	andi	r24, 0xFE	; 254
 68c:	83 bf       	out	0x33, r24	; 51
 68e:	83 b7       	in	r24, 0x33	; 51
 690:	82 60       	ori	r24, 0x02	; 2
 692:	83 bf       	out	0x33, r24	; 51
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	08 95       	ret
 698:	83 b7       	in	r24, 0x33	; 51
 69a:	84 60       	ori	r24, 0x04	; 4
 69c:	83 bf       	out	0x33, r24	; 51
 69e:	83 b7       	in	r24, 0x33	; 51
 6a0:	82 60       	ori	r24, 0x02	; 2
 6a2:	83 bf       	out	0x33, r24	; 51
 6a4:	83 b7       	in	r24, 0x33	; 51
 6a6:	81 60       	ori	r24, 0x01	; 1
 6a8:	83 bf       	out	0x33, r24	; 51
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	08 95       	ret
 6ae:	83 b7       	in	r24, 0x33	; 51
 6b0:	84 60       	ori	r24, 0x04	; 4
 6b2:	83 bf       	out	0x33, r24	; 51
 6b4:	83 b7       	in	r24, 0x33	; 51
 6b6:	8e 7f       	andi	r24, 0xFE	; 254
 6b8:	83 bf       	out	0x33, r24	; 51
 6ba:	83 b7       	in	r24, 0x33	; 51
 6bc:	81 60       	ori	r24, 0x01	; 1
 6be:	83 bf       	out	0x33, r24	; 51
 6c0:	81 e0       	ldi	r24, 0x01	; 1
 6c2:	08 95       	ret
 6c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gsau8_initState+0x1>
 6c8:	81 30       	cpi	r24, 0x01	; 1
 6ca:	09 f0       	breq	.+2      	; 0x6ce <Timer_Start+0xfe>
 6cc:	dc c0       	rjmp	.+440    	; 0x886 <__stack+0x27>
 6ce:	60 95       	com	r22
 6d0:	70 95       	com	r23
 6d2:	7d bd       	out	0x2d, r23	; 45
 6d4:	6c bd       	out	0x2c, r22	; 44
 6d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gsau8_mode+0x1>
 6da:	81 30       	cpi	r24, 0x01	; 1
 6dc:	09 f4       	brne	.+2      	; 0x6e0 <Timer_Start+0x110>
 6de:	4b c0       	rjmp	.+150    	; 0x776 <Timer_Start+0x1a6>
 6e0:	20 f0       	brcs	.+8      	; 0x6ea <Timer_Start+0x11a>
 6e2:	82 30       	cpi	r24, 0x02	; 2
 6e4:	09 f4       	brne	.+2      	; 0x6e8 <Timer_Start+0x118>
 6e6:	52 c0       	rjmp	.+164    	; 0x78c <Timer_Start+0x1bc>
 6e8:	d0 c0       	rjmp	.+416    	; 0x88a <__stack+0x2b>
 6ea:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <gsau8_preScaler+0x1>
 6ee:	84 30       	cpi	r24, 0x04	; 4
 6f0:	09 f1       	breq	.+66     	; 0x734 <Timer_Start+0x164>
 6f2:	28 f4       	brcc	.+10     	; 0x6fe <Timer_Start+0x12e>
 6f4:	81 30       	cpi	r24, 0x01	; 1
 6f6:	41 f0       	breq	.+16     	; 0x708 <Timer_Start+0x138>
 6f8:	82 30       	cpi	r24, 0x02	; 2
 6fa:	89 f0       	breq	.+34     	; 0x71e <Timer_Start+0x14e>
 6fc:	c8 c0       	rjmp	.+400    	; 0x88e <__stack+0x2f>
 6fe:	86 30       	cpi	r24, 0x06	; 6
 700:	21 f1       	breq	.+72     	; 0x74a <Timer_Start+0x17a>
 702:	87 30       	cpi	r24, 0x07	; 7
 704:	69 f1       	breq	.+90     	; 0x760 <Timer_Start+0x190>
 706:	c3 c0       	rjmp	.+390    	; 0x88e <__stack+0x2f>
 708:	8e b5       	in	r24, 0x2e	; 46
 70a:	8b 7f       	andi	r24, 0xFB	; 251
 70c:	8e bd       	out	0x2e, r24	; 46
 70e:	8e b5       	in	r24, 0x2e	; 46
 710:	8d 7f       	andi	r24, 0xFD	; 253
 712:	8e bd       	out	0x2e, r24	; 46
 714:	8e b5       	in	r24, 0x2e	; 46
 716:	81 60       	ori	r24, 0x01	; 1
 718:	8e bd       	out	0x2e, r24	; 46
 71a:	81 e0       	ldi	r24, 0x01	; 1
 71c:	08 95       	ret
 71e:	8e b5       	in	r24, 0x2e	; 46
 720:	8b 7f       	andi	r24, 0xFB	; 251
 722:	8e bd       	out	0x2e, r24	; 46
 724:	8e b5       	in	r24, 0x2e	; 46
 726:	8e 7f       	andi	r24, 0xFE	; 254
 728:	8e bd       	out	0x2e, r24	; 46
 72a:	8e b5       	in	r24, 0x2e	; 46
 72c:	82 60       	ori	r24, 0x02	; 2
 72e:	8e bd       	out	0x2e, r24	; 46
 730:	81 e0       	ldi	r24, 0x01	; 1
 732:	08 95       	ret
 734:	8e b5       	in	r24, 0x2e	; 46
 736:	8b 7f       	andi	r24, 0xFB	; 251
 738:	8e bd       	out	0x2e, r24	; 46
 73a:	8e b5       	in	r24, 0x2e	; 46
 73c:	81 60       	ori	r24, 0x01	; 1
 73e:	8e bd       	out	0x2e, r24	; 46
 740:	8e b5       	in	r24, 0x2e	; 46
 742:	82 60       	ori	r24, 0x02	; 2
 744:	8e bd       	out	0x2e, r24	; 46
 746:	81 e0       	ldi	r24, 0x01	; 1
 748:	08 95       	ret
 74a:	8e b5       	in	r24, 0x2e	; 46
 74c:	8d 7f       	andi	r24, 0xFD	; 253
 74e:	8e bd       	out	0x2e, r24	; 46
 750:	8e b5       	in	r24, 0x2e	; 46
 752:	8e 7f       	andi	r24, 0xFE	; 254
 754:	8e bd       	out	0x2e, r24	; 46
 756:	8e b5       	in	r24, 0x2e	; 46
 758:	84 60       	ori	r24, 0x04	; 4
 75a:	8e bd       	out	0x2e, r24	; 46
 75c:	81 e0       	ldi	r24, 0x01	; 1
 75e:	08 95       	ret
 760:	8e b5       	in	r24, 0x2e	; 46
 762:	8d 7f       	andi	r24, 0xFD	; 253
 764:	8e bd       	out	0x2e, r24	; 46
 766:	8e b5       	in	r24, 0x2e	; 46
 768:	81 60       	ori	r24, 0x01	; 1
 76a:	8e bd       	out	0x2e, r24	; 46
 76c:	8e b5       	in	r24, 0x2e	; 46
 76e:	84 60       	ori	r24, 0x04	; 4
 770:	8e bd       	out	0x2e, r24	; 46
 772:	81 e0       	ldi	r24, 0x01	; 1
 774:	08 95       	ret
 776:	8e b5       	in	r24, 0x2e	; 46
 778:	82 60       	ori	r24, 0x02	; 2
 77a:	8e bd       	out	0x2e, r24	; 46
 77c:	8e b5       	in	r24, 0x2e	; 46
 77e:	81 60       	ori	r24, 0x01	; 1
 780:	8e bd       	out	0x2e, r24	; 46
 782:	8e b5       	in	r24, 0x2e	; 46
 784:	84 60       	ori	r24, 0x04	; 4
 786:	8e bd       	out	0x2e, r24	; 46
 788:	81 e0       	ldi	r24, 0x01	; 1
 78a:	08 95       	ret
 78c:	8e b5       	in	r24, 0x2e	; 46
 78e:	82 60       	ori	r24, 0x02	; 2
 790:	8e bd       	out	0x2e, r24	; 46
 792:	8e b5       	in	r24, 0x2e	; 46
 794:	84 60       	ori	r24, 0x04	; 4
 796:	8e bd       	out	0x2e, r24	; 46
 798:	8e b5       	in	r24, 0x2e	; 46
 79a:	8e 7f       	andi	r24, 0xFE	; 254
 79c:	8e bd       	out	0x2e, r24	; 46
 79e:	81 e0       	ldi	r24, 0x01	; 1
 7a0:	08 95       	ret
 7a2:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gsau8_initState+0x2>
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	09 f0       	breq	.+2      	; 0x7ac <Timer_Start+0x1dc>
 7aa:	73 c0       	rjmp	.+230    	; 0x892 <__stack+0x33>
 7ac:	60 95       	com	r22
 7ae:	64 bd       	out	0x24, r22	; 36
 7b0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gsau8_mode+0x2>
 7b4:	88 23       	and	r24, r24
 7b6:	29 f0       	breq	.+10     	; 0x7c2 <Timer_Start+0x1f2>
 7b8:	83 30       	cpi	r24, 0x03	; 3
 7ba:	08 f4       	brcc	.+2      	; 0x7be <Timer_Start+0x1ee>
 7bc:	6c c0       	rjmp	.+216    	; 0x896 <__stack+0x37>
 7be:	80 e0       	ldi	r24, 0x00	; 0
 7c0:	08 95       	ret
 7c2:	e0 91 7e 00 	lds	r30, 0x007E	; 0x80007e <gsau8_preScaler+0x2>
 7c6:	8e 2f       	mov	r24, r30
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	fc 01       	movw	r30, r24
 7cc:	31 97       	sbiw	r30, 0x01	; 1
 7ce:	e7 30       	cpi	r30, 0x07	; 7
 7d0:	f1 05       	cpc	r31, r1
 7d2:	08 f0       	brcs	.+2      	; 0x7d6 <Timer_Start+0x206>
 7d4:	62 c0       	rjmp	.+196    	; 0x89a <__stack+0x3b>
 7d6:	e6 5d       	subi	r30, 0xD6	; 214
 7d8:	ff 4f       	sbci	r31, 0xFF	; 255
 7da:	da c0       	rjmp	.+436    	; 0x990 <__tablejump2__>
 7dc:	85 b5       	in	r24, 0x25	; 37
 7de:	84 60       	ori	r24, 0x04	; 4
 7e0:	85 bd       	out	0x25, r24	; 37
 7e2:	85 b5       	in	r24, 0x25	; 37
 7e4:	82 60       	ori	r24, 0x02	; 2
 7e6:	85 bd       	out	0x25, r24	; 37
 7e8:	85 b5       	in	r24, 0x25	; 37
 7ea:	81 60       	ori	r24, 0x01	; 1
 7ec:	85 bd       	out	0x25, r24	; 37
 7ee:	81 e0       	ldi	r24, 0x01	; 1
 7f0:	08 95       	ret
 7f2:	85 b5       	in	r24, 0x25	; 37
 7f4:	8e 7f       	andi	r24, 0xFE	; 254
 7f6:	85 bd       	out	0x25, r24	; 37
 7f8:	85 b5       	in	r24, 0x25	; 37
 7fa:	8b 7f       	andi	r24, 0xFB	; 251
 7fc:	85 bd       	out	0x25, r24	; 37
 7fe:	85 b5       	in	r24, 0x25	; 37
 800:	82 60       	ori	r24, 0x02	; 2
 802:	85 bd       	out	0x25, r24	; 37
 804:	81 e0       	ldi	r24, 0x01	; 1
 806:	08 95       	ret
 808:	85 b5       	in	r24, 0x25	; 37
 80a:	8b 7f       	andi	r24, 0xFB	; 251
 80c:	85 bd       	out	0x25, r24	; 37
 80e:	85 b5       	in	r24, 0x25	; 37
 810:	81 60       	ori	r24, 0x01	; 1
 812:	85 bd       	out	0x25, r24	; 37
 814:	85 b5       	in	r24, 0x25	; 37
 816:	82 60       	ori	r24, 0x02	; 2
 818:	85 bd       	out	0x25, r24	; 37
 81a:	81 e0       	ldi	r24, 0x01	; 1
 81c:	08 95       	ret
 81e:	85 b5       	in	r24, 0x25	; 37
 820:	84 60       	ori	r24, 0x04	; 4
 822:	85 bd       	out	0x25, r24	; 37
 824:	85 b5       	in	r24, 0x25	; 37
 826:	8e 7f       	andi	r24, 0xFE	; 254
 828:	85 bd       	out	0x25, r24	; 37
 82a:	85 b5       	in	r24, 0x25	; 37
 82c:	8d 7f       	andi	r24, 0xFD	; 253
 82e:	85 bd       	out	0x25, r24	; 37
 830:	81 e0       	ldi	r24, 0x01	; 1
 832:	08 95       	ret
 834:	85 b5       	in	r24, 0x25	; 37
 836:	84 60       	ori	r24, 0x04	; 4
 838:	85 bd       	out	0x25, r24	; 37
 83a:	85 b5       	in	r24, 0x25	; 37
 83c:	81 60       	ori	r24, 0x01	; 1
 83e:	85 bd       	out	0x25, r24	; 37
 840:	85 b5       	in	r24, 0x25	; 37
 842:	8d 7f       	andi	r24, 0xFD	; 253
 844:	85 bd       	out	0x25, r24	; 37
 846:	81 e0       	ldi	r24, 0x01	; 1
 848:	08 95       	ret
 84a:	85 b5       	in	r24, 0x25	; 37
 84c:	84 60       	ori	r24, 0x04	; 4
 84e:	85 bd       	out	0x25, r24	; 37
 850:	85 b5       	in	r24, 0x25	; 37
 852:	82 60       	ori	r24, 0x02	; 2
 854:	85 bd       	out	0x25, r24	; 37
 856:	85 b5       	in	r24, 0x25	; 37
 858:	8e 7f       	andi	r24, 0xFE	; 254
 85a:	85 bd       	out	0x25, r24	; 37
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	08 95       	ret
 860:	85 b5       	in	r24, 0x25	; 37
 862:	84 60       	ori	r24, 0x04	; 4
 864:	85 bd       	out	0x25, r24	; 37
 866:	85 b5       	in	r24, 0x25	; 37
 868:	82 60       	ori	r24, 0x02	; 2
 86a:	85 bd       	out	0x25, r24	; 37
 86c:	85 b5       	in	r24, 0x25	; 37
 86e:	81 60       	ori	r24, 0x01	; 1
 870:	85 bd       	out	0x25, r24	; 37
 872:	81 e0       	ldi	r24, 0x01	; 1
 874:	08 95       	ret
 876:	80 e0       	ldi	r24, 0x00	; 0
 878:	08 95       	ret
 87a:	80 e0       	ldi	r24, 0x00	; 0
 87c:	08 95       	ret
 87e:	80 e0       	ldi	r24, 0x00	; 0
 880:	08 95       	ret
 882:	80 e0       	ldi	r24, 0x00	; 0
 884:	08 95       	ret
 886:	80 e0       	ldi	r24, 0x00	; 0
 888:	08 95       	ret
 88a:	80 e0       	ldi	r24, 0x00	; 0
 88c:	08 95       	ret
 88e:	80 e0       	ldi	r24, 0x00	; 0
 890:	08 95       	ret
 892:	80 e0       	ldi	r24, 0x00	; 0
 894:	08 95       	ret
 896:	81 e0       	ldi	r24, 0x01	; 1
 898:	08 95       	ret
 89a:	80 e0       	ldi	r24, 0x00	; 0
 89c:	08 95       	ret

0000089e <Timer_Stop>:
 89e:	81 30       	cpi	r24, 0x01	; 1
 8a0:	99 f0       	breq	.+38     	; 0x8c8 <Timer_Stop+0x2a>
 8a2:	18 f0       	brcs	.+6      	; 0x8aa <Timer_Stop+0xc>
 8a4:	82 30       	cpi	r24, 0x02	; 2
 8a6:	f9 f0       	breq	.+62     	; 0x8e6 <Timer_Stop+0x48>
 8a8:	2d c0       	rjmp	.+90     	; 0x904 <Timer_Stop+0x66>
 8aa:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gsau8_initState>
 8ae:	81 30       	cpi	r24, 0x01	; 1
 8b0:	59 f5       	brne	.+86     	; 0x908 <Timer_Stop+0x6a>
 8b2:	83 b7       	in	r24, 0x33	; 51
 8b4:	84 60       	ori	r24, 0x04	; 4
 8b6:	83 bf       	out	0x33, r24	; 51
 8b8:	83 b7       	in	r24, 0x33	; 51
 8ba:	82 60       	ori	r24, 0x02	; 2
 8bc:	83 bf       	out	0x33, r24	; 51
 8be:	83 b7       	in	r24, 0x33	; 51
 8c0:	81 60       	ori	r24, 0x01	; 1
 8c2:	83 bf       	out	0x33, r24	; 51
 8c4:	81 e0       	ldi	r24, 0x01	; 1
 8c6:	08 95       	ret
 8c8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gsau8_initState+0x1>
 8cc:	81 30       	cpi	r24, 0x01	; 1
 8ce:	f1 f4       	brne	.+60     	; 0x90c <Timer_Stop+0x6e>
 8d0:	83 b7       	in	r24, 0x33	; 51
 8d2:	8b 7f       	andi	r24, 0xFB	; 251
 8d4:	83 bf       	out	0x33, r24	; 51
 8d6:	83 b7       	in	r24, 0x33	; 51
 8d8:	8d 7f       	andi	r24, 0xFD	; 253
 8da:	83 bf       	out	0x33, r24	; 51
 8dc:	83 b7       	in	r24, 0x33	; 51
 8de:	8e 7f       	andi	r24, 0xFE	; 254
 8e0:	83 bf       	out	0x33, r24	; 51
 8e2:	81 e0       	ldi	r24, 0x01	; 1
 8e4:	08 95       	ret
 8e6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gsau8_initState+0x2>
 8ea:	81 30       	cpi	r24, 0x01	; 1
 8ec:	89 f4       	brne	.+34     	; 0x910 <Timer_Stop+0x72>
 8ee:	85 b5       	in	r24, 0x25	; 37
 8f0:	8e 7f       	andi	r24, 0xFE	; 254
 8f2:	85 bd       	out	0x25, r24	; 37
 8f4:	85 b5       	in	r24, 0x25	; 37
 8f6:	8b 7f       	andi	r24, 0xFB	; 251
 8f8:	85 bd       	out	0x25, r24	; 37
 8fa:	85 b5       	in	r24, 0x25	; 37
 8fc:	8d 7f       	andi	r24, 0xFD	; 253
 8fe:	85 bd       	out	0x25, r24	; 37
 900:	81 e0       	ldi	r24, 0x01	; 1
 902:	08 95       	ret
 904:	80 e0       	ldi	r24, 0x00	; 0
 906:	08 95       	ret
 908:	80 e0       	ldi	r24, 0x00	; 0
 90a:	08 95       	ret
 90c:	80 e0       	ldi	r24, 0x00	; 0
 90e:	08 95       	ret
 910:	80 e0       	ldi	r24, 0x00	; 0
 912:	08 95       	ret

00000914 <Timer_SetValue>:


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
	switch(Timer_CH)
 914:	81 30       	cpi	r24, 0x01	; 1
 916:	49 f0       	breq	.+18     	; 0x92a <Timer_SetValue+0x16>
 918:	18 f0       	brcs	.+6      	; 0x920 <Timer_SetValue+0xc>
 91a:	82 30       	cpi	r24, 0x02	; 2
 91c:	69 f0       	breq	.+26     	; 0x938 <Timer_SetValue+0x24>
 91e:	11 c0       	rjmp	.+34     	; 0x942 <Timer_SetValue+0x2e>
	{
		case TIMER_0:
		          TCNT0=*Data;
 920:	fb 01       	movw	r30, r22
 922:	80 81       	ld	r24, Z
 924:	82 bf       	out	0x32, r24	; 50
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 926:	81 e0       	ldi	r24, 0x01	; 1
	switch(Timer_CH)
	{
		case TIMER_0:
		          TCNT0=*Data;
				  break; 
 928:	08 95       	ret
		case TIMER_1:
		           TCNT1=*Data;
 92a:	fb 01       	movw	r30, r22
 92c:	80 81       	ld	r24, Z
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	9d bd       	out	0x2d, r25	; 45
 932:	8c bd       	out	0x2c, r24	; 44
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 934:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_0:
		          TCNT0=*Data;
				  break; 
		case TIMER_1:
		           TCNT1=*Data;
		           break;
 936:	08 95       	ret
		case TIMER_2:
		           TCNT2=*Data;
 938:	fb 01       	movw	r30, r22
 93a:	80 81       	ld	r24, Z
 93c:	84 bd       	out	0x24, r24	; 36
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 93e:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_1:
		           TCNT1=*Data;
		           break;
		case TIMER_2:
		           TCNT2=*Data;
		           break;
 940:	08 95       	ret
		default:
		       ERROR=E_NOK;
 942:	80 e0       	ldi	r24, 0x00	; 0
			   break;
	}
	
	return ERROR;
}
 944:	08 95       	ret

00000946 <__vector_11>:


ISR(TIMER0_OVF_vect)
{
 946:	1f 92       	push	r1
 948:	0f 92       	push	r0
 94a:	0f b6       	in	r0, 0x3f	; 63
 94c:	0f 92       	push	r0
 94e:	11 24       	eor	r1, r1
 950:	8f 93       	push	r24
 952:	9f 93       	push	r25
 954:	af 93       	push	r26
 956:	bf 93       	push	r27
   gu_timer_count1++;
 958:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <gu_timer_count1>
 95c:	90 91 83 00 	lds	r25, 0x0083	; 0x800083 <gu_timer_count1+0x1>
 960:	a0 91 84 00 	lds	r26, 0x0084	; 0x800084 <gu_timer_count1+0x2>
 964:	b0 91 85 00 	lds	r27, 0x0085	; 0x800085 <gu_timer_count1+0x3>
 968:	01 96       	adiw	r24, 0x01	; 1
 96a:	a1 1d       	adc	r26, r1
 96c:	b1 1d       	adc	r27, r1
 96e:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <gu_timer_count1>
 972:	90 93 83 00 	sts	0x0083, r25	; 0x800083 <gu_timer_count1+0x1>
 976:	a0 93 84 00 	sts	0x0084, r26	; 0x800084 <gu_timer_count1+0x2>
 97a:	b0 93 85 00 	sts	0x0085, r27	; 0x800085 <gu_timer_count1+0x3>
 97e:	bf 91       	pop	r27
 980:	af 91       	pop	r26
 982:	9f 91       	pop	r25
 984:	8f 91       	pop	r24
 986:	0f 90       	pop	r0
 988:	0f be       	out	0x3f, r0	; 63
 98a:	0f 90       	pop	r0
 98c:	1f 90       	pop	r1
 98e:	18 95       	reti

00000990 <__tablejump2__>:
 990:	ee 0f       	add	r30, r30
 992:	ff 1f       	adc	r31, r31
 994:	05 90       	lpm	r0, Z+
 996:	f4 91       	lpm	r31, Z
 998:	e0 2d       	mov	r30, r0
 99a:	09 94       	ijmp

0000099c <_exit>:
 99c:	f8 94       	cli

0000099e <__stop_program>:
 99e:	ff cf       	rjmp	.-2      	; 0x99e <__stop_program>
