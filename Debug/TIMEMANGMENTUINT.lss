
TIMEMANGMENTUINT.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000898  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  00000898  0000092c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002b  00800062  00800062  0000092e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000092e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000960  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000120  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001231  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009dd  00000000  00000000  00001ced  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001165  00000000  00000000  000026ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000021c  00000000  00000000  00003830  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003d74  00000000  00000000  00003a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c37  00000000  00000000  000077c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  000083f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00001200  00000000  00000000  000084bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	30 c0       	rjmp	.+96     	; 0x62 <__ctors_end>
   2:	00 00       	nop
   4:	49 c0       	rjmp	.+146    	; 0x98 <__bad_interrupt>
   6:	00 00       	nop
   8:	47 c0       	rjmp	.+142    	; 0x98 <__bad_interrupt>
   a:	00 00       	nop
   c:	45 c0       	rjmp	.+138    	; 0x98 <__bad_interrupt>
   e:	00 00       	nop
  10:	43 c0       	rjmp	.+134    	; 0x98 <__bad_interrupt>
  12:	00 00       	nop
  14:	41 c0       	rjmp	.+130    	; 0x98 <__bad_interrupt>
  16:	00 00       	nop
  18:	3f c0       	rjmp	.+126    	; 0x98 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3d c0       	rjmp	.+122    	; 0x98 <__bad_interrupt>
  1e:	00 00       	nop
  20:	3b c0       	rjmp	.+118    	; 0x98 <__bad_interrupt>
  22:	00 00       	nop
  24:	39 c0       	rjmp	.+114    	; 0x98 <__bad_interrupt>
  26:	00 00       	nop
  28:	37 c0       	rjmp	.+110    	; 0x98 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	08 c4       	rjmp	.+2064   	; 0x83e <__vector_11>
  2e:	00 00       	nop
  30:	33 c0       	rjmp	.+102    	; 0x98 <__bad_interrupt>
  32:	00 00       	nop
  34:	31 c0       	rjmp	.+98     	; 0x98 <__bad_interrupt>
  36:	00 00       	nop
  38:	2f c0       	rjmp	.+94     	; 0x98 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2d c0       	rjmp	.+90     	; 0x98 <__bad_interrupt>
  3e:	00 00       	nop
  40:	2b c0       	rjmp	.+86     	; 0x98 <__bad_interrupt>
  42:	00 00       	nop
  44:	29 c0       	rjmp	.+82     	; 0x98 <__bad_interrupt>
  46:	00 00       	nop
  48:	27 c0       	rjmp	.+78     	; 0x98 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	25 c0       	rjmp	.+74     	; 0x98 <__bad_interrupt>
  4e:	00 00       	nop
  50:	23 c0       	rjmp	.+70     	; 0x98 <__bad_interrupt>
  52:	00 00       	nop
  54:	6a 03       	fmul	r22, r18
  56:	75 03       	mulsu	r23, r21
  58:	80 03       	fmuls	r16, r16
  5a:	8b 03       	fmulsu	r16, r19
  5c:	96 03       	fmuls	r17, r22
  5e:	a1 03       	fmuls	r18, r17
  60:	ac 03       	fmulsu	r18, r20

00000062 <__ctors_end>:
  62:	11 24       	eor	r1, r1
  64:	1f be       	out	0x3f, r1	; 63
  66:	cf e5       	ldi	r28, 0x5F	; 95
  68:	d8 e0       	ldi	r29, 0x08	; 8
  6a:	de bf       	out	0x3e, r29	; 62
  6c:	cd bf       	out	0x3d, r28	; 61

0000006e <__do_copy_data>:
  6e:	10 e0       	ldi	r17, 0x00	; 0
  70:	a0 e6       	ldi	r26, 0x60	; 96
  72:	b0 e0       	ldi	r27, 0x00	; 0
  74:	e8 e9       	ldi	r30, 0x98	; 152
  76:	f8 e0       	ldi	r31, 0x08	; 8
  78:	02 c0       	rjmp	.+4      	; 0x7e <__do_copy_data+0x10>
  7a:	05 90       	lpm	r0, Z+
  7c:	0d 92       	st	X+, r0
  7e:	a2 36       	cpi	r26, 0x62	; 98
  80:	b1 07       	cpc	r27, r17
  82:	d9 f7       	brne	.-10     	; 0x7a <__do_copy_data+0xc>

00000084 <__do_clear_bss>:
  84:	20 e0       	ldi	r18, 0x00	; 0
  86:	a2 e6       	ldi	r26, 0x62	; 98
  88:	b0 e0       	ldi	r27, 0x00	; 0
  8a:	01 c0       	rjmp	.+2      	; 0x8e <.do_clear_bss_start>

0000008c <.do_clear_bss_loop>:
  8c:	1d 92       	st	X+, r1

0000008e <.do_clear_bss_start>:
  8e:	ad 38       	cpi	r26, 0x8D	; 141
  90:	b2 07       	cpc	r27, r18
  92:	e1 f7       	brne	.-8      	; 0x8c <.do_clear_bss_loop>
  94:	87 d1       	rcall	.+782    	; 0x3a4 <main>
  96:	fe c3       	rjmp	.+2044   	; 0x894 <_exit>

00000098 <__bad_interrupt>:
  98:	b3 cf       	rjmp	.-154    	; 0x0 <__vectors>

0000009a <DIO_init>:
            break;
   }

   
   return ERROR;
}
  9a:	fc 01       	movw	r30, r24
  9c:	89 2b       	or	r24, r25
  9e:	09 f4       	brne	.+2      	; 0xa2 <DIO_init+0x8>
  a0:	51 c0       	rjmp	.+162    	; 0x144 <DIO_init+0xaa>
  a2:	80 81       	ld	r24, Z
  a4:	81 30       	cpi	r24, 0x01	; 1
  a6:	c1 f0       	breq	.+48     	; 0xd8 <DIO_init+0x3e>
  a8:	28 f0       	brcs	.+10     	; 0xb4 <DIO_init+0x1a>
  aa:	82 30       	cpi	r24, 0x02	; 2
  ac:	39 f1       	breq	.+78     	; 0xfc <DIO_init+0x62>
  ae:	83 30       	cpi	r24, 0x03	; 3
  b0:	b9 f1       	breq	.+110    	; 0x120 <DIO_init+0x86>
  b2:	4a c0       	rjmp	.+148    	; 0x148 <DIO_init+0xae>
  b4:	82 81       	ldd	r24, Z+2	; 0x02
  b6:	8f 3f       	cpi	r24, 0xFF	; 255
  b8:	31 f4       	brne	.+12     	; 0xc6 <DIO_init+0x2c>
  ba:	9a b3       	in	r25, 0x1a	; 26
  bc:	81 81       	ldd	r24, Z+1	; 0x01
  be:	89 2b       	or	r24, r25
  c0:	8a bb       	out	0x1a, r24	; 26
  c2:	81 e0       	ldi	r24, 0x01	; 1
  c4:	08 95       	ret
  c6:	81 11       	cpse	r24, r1
  c8:	41 c0       	rjmp	.+130    	; 0x14c <DIO_init+0xb2>
  ca:	9a b3       	in	r25, 0x1a	; 26
  cc:	81 81       	ldd	r24, Z+1	; 0x01
  ce:	80 95       	com	r24
  d0:	89 23       	and	r24, r25
  d2:	8a bb       	out	0x1a, r24	; 26
  d4:	81 e0       	ldi	r24, 0x01	; 1
  d6:	08 95       	ret
  d8:	82 81       	ldd	r24, Z+2	; 0x02
  da:	8f 3f       	cpi	r24, 0xFF	; 255
  dc:	31 f4       	brne	.+12     	; 0xea <DIO_init+0x50>
  de:	97 b3       	in	r25, 0x17	; 23
  e0:	81 81       	ldd	r24, Z+1	; 0x01
  e2:	89 2b       	or	r24, r25
  e4:	87 bb       	out	0x17, r24	; 23
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	08 95       	ret
  ea:	81 11       	cpse	r24, r1
  ec:	31 c0       	rjmp	.+98     	; 0x150 <DIO_init+0xb6>
  ee:	97 b3       	in	r25, 0x17	; 23
  f0:	81 81       	ldd	r24, Z+1	; 0x01
  f2:	80 95       	com	r24
  f4:	89 23       	and	r24, r25
  f6:	87 bb       	out	0x17, r24	; 23
  f8:	81 e0       	ldi	r24, 0x01	; 1
  fa:	08 95       	ret
  fc:	82 81       	ldd	r24, Z+2	; 0x02
  fe:	8f 3f       	cpi	r24, 0xFF	; 255
 100:	31 f4       	brne	.+12     	; 0x10e <DIO_init+0x74>
 102:	94 b3       	in	r25, 0x14	; 20
 104:	81 81       	ldd	r24, Z+1	; 0x01
 106:	89 2b       	or	r24, r25
 108:	84 bb       	out	0x14, r24	; 20
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	08 95       	ret
 10e:	81 11       	cpse	r24, r1
 110:	21 c0       	rjmp	.+66     	; 0x154 <DIO_init+0xba>
 112:	94 b3       	in	r25, 0x14	; 20
 114:	81 81       	ldd	r24, Z+1	; 0x01
 116:	80 95       	com	r24
 118:	89 23       	and	r24, r25
 11a:	84 bb       	out	0x14, r24	; 20
 11c:	81 e0       	ldi	r24, 0x01	; 1
 11e:	08 95       	ret
 120:	82 81       	ldd	r24, Z+2	; 0x02
 122:	8f 3f       	cpi	r24, 0xFF	; 255
 124:	31 f4       	brne	.+12     	; 0x132 <DIO_init+0x98>
 126:	91 b3       	in	r25, 0x11	; 17
 128:	81 81       	ldd	r24, Z+1	; 0x01
 12a:	89 2b       	or	r24, r25
 12c:	81 bb       	out	0x11, r24	; 17
 12e:	81 e0       	ldi	r24, 0x01	; 1
 130:	08 95       	ret
 132:	81 11       	cpse	r24, r1
 134:	11 c0       	rjmp	.+34     	; 0x158 <DIO_init+0xbe>
 136:	91 b3       	in	r25, 0x11	; 17
 138:	81 81       	ldd	r24, Z+1	; 0x01
 13a:	80 95       	com	r24
 13c:	89 23       	and	r24, r25
 13e:	81 bb       	out	0x11, r24	; 17
 140:	81 e0       	ldi	r24, 0x01	; 1
 142:	08 95       	ret
 144:	80 e0       	ldi	r24, 0x00	; 0
 146:	08 95       	ret
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	08 95       	ret
 14c:	80 e0       	ldi	r24, 0x00	; 0
 14e:	08 95       	ret
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	08 95       	ret
 154:	80 e0       	ldi	r24, 0x00	; 0
 156:	08 95       	ret
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret

0000015c <DIO_Toggle>:
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
   
   switch (GPIO)
 15c:	81 30       	cpi	r24, 0x01	; 1
 15e:	59 f0       	breq	.+22     	; 0x176 <DIO_Toggle+0x1a>
 160:	28 f0       	brcs	.+10     	; 0x16c <DIO_Toggle+0x10>
 162:	82 30       	cpi	r24, 0x02	; 2
 164:	69 f0       	breq	.+26     	; 0x180 <DIO_Toggle+0x24>
 166:	83 30       	cpi	r24, 0x03	; 3
 168:	81 f0       	breq	.+32     	; 0x18a <DIO_Toggle+0x2e>
 16a:	14 c0       	rjmp	.+40     	; 0x194 <DIO_Toggle+0x38>
   {
      case GPIOA:
            PORTA_DATA^=pins;
 16c:	8b b3       	in	r24, 0x1b	; 27
 16e:	68 27       	eor	r22, r24
 170:	6b bb       	out	0x1b, r22	; 27
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 172:	81 e0       	ldi	r24, 0x01	; 1
   
   switch (GPIO)
   {
      case GPIOA:
            PORTA_DATA^=pins;
            break;
 174:	08 95       	ret
      case GPIOB:
            PORTB_DATA^=pins;
 176:	88 b3       	in	r24, 0x18	; 24
 178:	68 27       	eor	r22, r24
 17a:	68 bb       	out	0x18, r22	; 24
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 17c:	81 e0       	ldi	r24, 0x01	; 1
      case GPIOA:
            PORTA_DATA^=pins;
            break;
      case GPIOB:
            PORTB_DATA^=pins;
            break;
 17e:	08 95       	ret
      case GPIOC:
           PORTC_DATA^=pins;
 180:	85 b3       	in	r24, 0x15	; 21
 182:	68 27       	eor	r22, r24
 184:	65 bb       	out	0x15, r22	; 21
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 186:	81 e0       	ldi	r24, 0x01	; 1
      case GPIOB:
            PORTB_DATA^=pins;
            break;
      case GPIOC:
           PORTC_DATA^=pins;
           break;
 188:	08 95       	ret
      case GPIOD:
          PORTD_DATA^=pins;
 18a:	82 b3       	in	r24, 0x12	; 18
 18c:	68 27       	eor	r22, r24
 18e:	62 bb       	out	0x12, r22	; 18
*Description: This function toggles the value of a full port, a nibble
* 			  or even one pin.
*/
ERROR_STATUS DIO_Toggle (uint8_t GPIO, uint8_t pins)
{  /*ERROR RET VARIBALE*/
   ERROR_STATUS EROR=E_OK;
 190:	81 e0       	ldi	r24, 0x01	; 1
      case GPIOC:
           PORTC_DATA^=pins;
           break;
      case GPIOD:
          PORTD_DATA^=pins;
          break;
 192:	08 95       	ret
      default:
          EROR=E_NOK;
 194:	80 e0       	ldi	r24, 0x00	; 0
   }


   return EROR;
   
 196:	08 95       	ret

00000198 <TMU_Init>:
Synchronous
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	00 d0       	rcall	.+0      	; 0x19e <TMU_Init+0x6>
 19e:	00 d0       	rcall	.+0      	; 0x1a0 <TMU_Init+0x8>
 1a0:	cd b7       	in	r28, 0x3d	; 61
 1a2:	de b7       	in	r29, 0x3e	; 62
   EnmTMUError_t status =E_OK;
   g_res=ConfigPtr->RES;
   Timer_cfg_s instance={0};
 1a4:	19 82       	std	Y+1, r1	; 0x01
 1a6:	1a 82       	std	Y+2, r1	; 0x02
 1a8:	1b 82       	std	Y+3, r1	; 0x03
 1aa:	1c 82       	std	Y+4, r1	; 0x04
   switch(ConfigPtr->TIMER_ID)
 1ac:	fc 01       	movw	r30, r24
 1ae:	81 81       	ldd	r24, Z+1	; 0x01
 1b0:	81 30       	cpi	r24, 0x01	; 1
 1b2:	69 f0       	breq	.+26     	; 0x1ce <TMU_Init+0x36>
 1b4:	18 f0       	brcs	.+6      	; 0x1bc <TMU_Init+0x24>
 1b6:	82 30       	cpi	r24, 0x02	; 2
 1b8:	a1 f0       	breq	.+40     	; 0x1e2 <TMU_Init+0x4a>
 1ba:	1e c0       	rjmp	.+60     	; 0x1f8 <TMU_Init+0x60>
   {    
     case TIMER_0:
            instance.Timer_CH=TIMER_0;
            instance.Timer_Mode=TIMER_MODE;
            instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
 1bc:	81 e0       	ldi	r24, 0x01	; 1
 1be:	8b 83       	std	Y+3, r24	; 0x03
            instance.Timer_Prescaler=TIMER_PRESCALER_64;
 1c0:	84 e0       	ldi	r24, 0x04	; 4
 1c2:	8c 83       	std	Y+4, r24	; 0x04
            Timer_Init(&instance);
 1c4:	ce 01       	movw	r24, r28
 1c6:	01 96       	adiw	r24, 0x01	; 1
 1c8:	15 d1       	rcall	.+554    	; 0x3f4 <Timer_Init>
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
   EnmTMUError_t status =E_OK;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
            instance.Timer_CH=TIMER_0;
            instance.Timer_Mode=TIMER_MODE;
            instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
            instance.Timer_Prescaler=TIMER_PRESCALER_64;
            Timer_Init(&instance);
            break;
 1cc:	16 c0       	rjmp	.+44     	; 0x1fa <TMU_Init+0x62>
      case TIMER_1:
            instance.Timer_CH=TIMER_1;
 1ce:	81 e0       	ldi	r24, 0x01	; 1
 1d0:	89 83       	std	Y+1, r24	; 0x01
            instance.Timer_Mode=TIMER_MODE;
            instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
 1d2:	8b 83       	std	Y+3, r24	; 0x03
            instance.Timer_Prescaler=TIMER_PRESCALER_64;
 1d4:	84 e0       	ldi	r24, 0x04	; 4
 1d6:	8c 83       	std	Y+4, r24	; 0x04
            Timer_Init(&instance);
 1d8:	ce 01       	movw	r24, r28
 1da:	01 96       	adiw	r24, 0x01	; 1
 1dc:	0b d1       	rcall	.+534    	; 0x3f4 <Timer_Init>
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
   EnmTMUError_t status =E_OK;
 1de:	81 e0       	ldi	r24, 0x01	; 1
            instance.Timer_CH=TIMER_1;
            instance.Timer_Mode=TIMER_MODE;
            instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
            instance.Timer_Prescaler=TIMER_PRESCALER_64;
            Timer_Init(&instance);
            break;
 1e0:	0c c0       	rjmp	.+24     	; 0x1fa <TMU_Init+0x62>
      case TIMER_2:
             instance.Timer_CH=TIMER_2;
 1e2:	82 e0       	ldi	r24, 0x02	; 2
 1e4:	89 83       	std	Y+1, r24	; 0x01
             instance.Timer_Mode=TIMER_MODE;
             instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	8b 83       	std	Y+3, r24	; 0x03
             instance.Timer_Prescaler=TIMER_PRESCALER_64;
 1ea:	84 e0       	ldi	r24, 0x04	; 4
 1ec:	8c 83       	std	Y+4, r24	; 0x04
             Timer_Init(&instance);
 1ee:	ce 01       	movw	r24, r28
 1f0:	01 96       	adiw	r24, 0x01	; 1
 1f2:	00 d1       	rcall	.+512    	; 0x3f4 <Timer_Init>
Non Reentrant
ConfigPtr Pointer to a selected configuration structure*/
/************************************************************************/
EnmTMUError_t TMU_Init (const TMU_ConfigType * ConfigPtr )
{
   EnmTMUError_t status =E_OK;
 1f4:	81 e0       	ldi	r24, 0x01	; 1
             instance.Timer_CH=TIMER_2;
             instance.Timer_Mode=TIMER_MODE;
             instance.Timer_Int_MODE=TIMER_INTERRUPT_MODE;
             instance.Timer_Prescaler=TIMER_PRESCALER_64;
             Timer_Init(&instance);
             break;
 1f6:	01 c0       	rjmp	.+2      	; 0x1fa <TMU_Init+0x62>
      default:
             status =E_NOK;
 1f8:	80 e0       	ldi	r24, 0x00	; 0
             break;
   }
   return status;
}
 1fa:	0f 90       	pop	r0
 1fc:	0f 90       	pop	r0
 1fe:	0f 90       	pop	r0
 200:	0f 90       	pop	r0
 202:	df 91       	pop	r29
 204:	cf 91       	pop	r28
 206:	08 95       	ret

00000208 <TMU_Start_Timer>:
Parameters (inOut):
Return:*/

EnmTMUError_t TMU_Start_Timer(uint16_t time,ptrtotask_CBK_FUNC ptrtofun,uint8_t periodicORoneshot)
{   EnmTMUError_t status=E_OK;
  gstr_arrayoftasks[gs_arraycount].delay=time;
 208:	20 91 77 00 	lds	r18, 0x0077	; 0x800077 <gs_arraycount>
 20c:	37 e0       	ldi	r19, 0x07	; 7
 20e:	23 9f       	mul	r18, r19
 210:	f0 01       	movw	r30, r0
 212:	11 24       	eor	r1, r1
 214:	ee 59       	subi	r30, 0x9E	; 158
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	92 83       	std	Z+2, r25	; 0x02
 21a:	81 83       	std	Z+1, r24	; 0x01
  gstr_arrayoftasks[gs_arraycount].Ptrtotask=ptrtofun;
 21c:	74 83       	std	Z+4, r23	; 0x04
 21e:	63 83       	std	Z+3, r22	; 0x03
  gstr_arrayoftasks[gs_arraycount].perodicity=periodicORoneshot;
 220:	40 83       	st	Z, r20
  gstr_arrayoftasks[gs_arraycount].delay_milistone=0;
 222:	16 82       	std	Z+6, r1	; 0x06
 224:	15 82       	std	Z+5, r1	; 0x05
  
  if(gs_arraycount==0)
 226:	21 11       	cpse	r18, r1
 228:	04 c0       	rjmp	.+8      	; 0x232 <TMU_Start_Timer+0x2a>
  {
     Timer_Start(TMU_TIMER_ID,6);  
 22a:	66 e0       	ldi	r22, 0x06	; 6
 22c:	70 e0       	ldi	r23, 0x00	; 0
 22e:	80 e0       	ldi	r24, 0x00	; 0
 230:	4b d1       	rcall	.+662    	; 0x4c8 <Timer_Start>
  }

gs_arraycount++;
 232:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gs_arraycount>
 236:	8f 5f       	subi	r24, 0xFF	; 255
 238:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gs_arraycount>

return status;
}
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	08 95       	ret

00000240 <TMU_Stop_Timer>:
* @brief: TMU Stop
* @param: ptrFun: pointer to callback function
* @return: EnmTMUError_t status code with error code if one occurred
*/
EnmTMUError_t TMU_Stop_Timer(void (*ptrtofun)(void))
{
 240:	cf 93       	push	r28
 242:	df 93       	push	r29
 244:	ac 01       	movw	r20, r24
 246:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <gs_arraycount>
 24a:	e2 e6       	ldi	r30, 0x62	; 98
 24c:	f0 e0       	ldi	r31, 0x00	; 0
   EnmTMUError_t status=E_OK;
   uint8_t au8_counter=0;
   for(au8_counter=0;au8_counter<BUFFER_SIZE;au8_counter++)
 24e:	90 e0       	ldi	r25, 0x00	; 0
            gstr_arrayoftasks[au8_counter].delay=0;
            gstr_arrayoftasks[au8_counter].perodicity=0;
         }
         else
         {
            gstr_arrayoftasks[au8_counter].Ptrtotask=gstr_arrayoftasks[BUFFER_SIZE-1].Ptrtotask;
 250:	ef 01       	movw	r28, r30
{
   EnmTMUError_t status=E_OK;
   uint8_t au8_counter=0;
   for(au8_counter=0;au8_counter<BUFFER_SIZE;au8_counter++)
   {
      if(gstr_arrayoftasks[au8_counter].Ptrtotask==ptrtofun)
 252:	23 81       	ldd	r18, Z+3	; 0x03
 254:	34 81       	ldd	r19, Z+4	; 0x04
 256:	24 17       	cp	r18, r20
 258:	35 07       	cpc	r19, r21
 25a:	01 f5       	brne	.+64     	; 0x29c <TMU_Stop_Timer+0x5c>
      {
         if(au8_counter==BUFFER_SIZE-1)
 25c:	92 30       	cpi	r25, 0x02	; 2
 25e:	41 f4       	brne	.+16     	; 0x270 <TMU_Stop_Timer+0x30>
         {
            gstr_arrayoftasks[au8_counter].Ptrtotask=NULL;
 260:	14 82       	std	Z+4, r1	; 0x04
 262:	13 82       	std	Z+3, r1	; 0x03
            gstr_arrayoftasks[au8_counter].delay_milistone=0;
 264:	16 82       	std	Z+6, r1	; 0x06
 266:	15 82       	std	Z+5, r1	; 0x05
            gstr_arrayoftasks[au8_counter].delay=0;
 268:	12 82       	std	Z+2, r1	; 0x02
 26a:	11 82       	std	Z+1, r1	; 0x01
            gstr_arrayoftasks[au8_counter].perodicity=0;
 26c:	10 82       	st	Z, r1
 26e:	15 c0       	rjmp	.+42     	; 0x29a <TMU_Stop_Timer+0x5a>
         }
         else
         {
            gstr_arrayoftasks[au8_counter].Ptrtotask=gstr_arrayoftasks[BUFFER_SIZE-1].Ptrtotask;
 270:	29 89       	ldd	r18, Y+17	; 0x11
 272:	3a 89       	ldd	r19, Y+18	; 0x12
 274:	34 83       	std	Z+4, r19	; 0x04
 276:	23 83       	std	Z+3, r18	; 0x03
            gstr_arrayoftasks[au8_counter].delay_milistone=gstr_arrayoftasks[BUFFER_SIZE-1].delay_milistone;
 278:	2b 89       	ldd	r18, Y+19	; 0x13
 27a:	3c 89       	ldd	r19, Y+20	; 0x14
 27c:	36 83       	std	Z+6, r19	; 0x06
 27e:	25 83       	std	Z+5, r18	; 0x05
            gstr_arrayoftasks[au8_counter].delay=gstr_arrayoftasks[BUFFER_SIZE-1].delay;
 280:	2f 85       	ldd	r18, Y+15	; 0x0f
 282:	38 89       	ldd	r19, Y+16	; 0x10
 284:	32 83       	std	Z+2, r19	; 0x02
 286:	21 83       	std	Z+1, r18	; 0x01
            gstr_arrayoftasks[au8_counter].perodicity=gstr_arrayoftasks[BUFFER_SIZE-1].perodicity;
 288:	2e 85       	ldd	r18, Y+14	; 0x0e
 28a:	20 83       	st	Z, r18
            
            gstr_arrayoftasks[BUFFER_SIZE-1].Ptrtotask=NULL;
 28c:	1a 8a       	std	Y+18, r1	; 0x12
 28e:	19 8a       	std	Y+17, r1	; 0x11
            gstr_arrayoftasks[BUFFER_SIZE-1].delay_milistone=0;
 290:	1c 8a       	std	Y+20, r1	; 0x14
 292:	1b 8a       	std	Y+19, r1	; 0x13
            gstr_arrayoftasks[BUFFER_SIZE-1].delay=0;
 294:	18 8a       	std	Y+16, r1	; 0x10
 296:	1f 86       	std	Y+15, r1	; 0x0f
            gstr_arrayoftasks[BUFFER_SIZE-1].perodicity=0;
 298:	1e 86       	std	Y+14, r1	; 0x0e
         }
         gs_arraycount--;
 29a:	81 50       	subi	r24, 0x01	; 1
*/
EnmTMUError_t TMU_Stop_Timer(void (*ptrtofun)(void))
{
   EnmTMUError_t status=E_OK;
   uint8_t au8_counter=0;
   for(au8_counter=0;au8_counter<BUFFER_SIZE;au8_counter++)
 29c:	9f 5f       	subi	r25, 0xFF	; 255
 29e:	37 96       	adiw	r30, 0x07	; 7
 2a0:	93 30       	cpi	r25, 0x03	; 3
 2a2:	b9 f6       	brne	.-82     	; 0x252 <TMU_Stop_Timer+0x12>
 2a4:	80 93 77 00 	sts	0x0077, r24	; 0x800077 <gs_arraycount>
         }
         gs_arraycount--;
      }
      
   }
   if(gs_arraycount==0)
 2a8:	81 11       	cpse	r24, r1
 2aa:	01 c0       	rjmp	.+2      	; 0x2ae <TMU_Stop_Timer+0x6e>
   {
      Timer_Stop(TMU_TIMER_ID);
 2ac:	74 d2       	rcall	.+1256   	; 0x796 <Timer_Stop>
   }
   return status;
}
 2ae:	81 e0       	ldi	r24, 0x01	; 1
 2b0:	df 91       	pop	r29
 2b2:	cf 91       	pop	r28
 2b4:	08 95       	ret

000002b6 <TMU_Dispatch>:
* @return: EnmTMUError_t status code with error code if one occurred
*/


EnmTMUError_t TMU_Dispatch(void)
{
 2b6:	cf 92       	push	r12
 2b8:	df 92       	push	r13
 2ba:	ef 92       	push	r14
 2bc:	ff 92       	push	r15
 2be:	0f 93       	push	r16
 2c0:	1f 93       	push	r17
 2c2:	cf 93       	push	r28
 2c4:	df 93       	push	r29
 2c6:	1f 92       	push	r1
 2c8:	cd b7       	in	r28, 0x3d	; 61
 2ca:	de b7       	in	r29, 0x3e	; 62
   EnmTMUError_t status=E_OK;
   uint8_t u8_preloadtimer=6;
 2cc:	86 e0       	ldi	r24, 0x06	; 6
 2ce:	89 83       	std	Y+1, r24	; 0x01
   
   if(gu_timer_count1>=RESOLUTION)
 2d0:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gu_timer_count1>
 2d4:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <gu_timer_count1+0x1>
 2d8:	a0 91 83 00 	lds	r26, 0x0083	; 0x800083 <gu_timer_count1+0x2>
 2dc:	b0 91 84 00 	lds	r27, 0x0084	; 0x800084 <gu_timer_count1+0x3>
 2e0:	89 2b       	or	r24, r25
 2e2:	8a 2b       	or	r24, r26
 2e4:	8b 2b       	or	r24, r27
 2e6:	09 f4       	brne	.+2      	; 0x2ea <TMU_Dispatch+0x34>
 2e8:	46 c0       	rjmp	.+140    	; 0x376 <TMU_Dispatch+0xc0>
   { 
      gu_timer_count1=0;
 2ea:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <gu_timer_count1>
 2ee:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <gu_timer_count1+0x1>
 2f2:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <gu_timer_count1+0x2>
 2f6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <gu_timer_count1+0x3>
      
      Timer_SetValue(TMU_TIMER_ID,&u8_preloadtimer);
 2fa:	be 01       	movw	r22, r28
 2fc:	6f 5f       	subi	r22, 0xFF	; 255
 2fe:	7f 4f       	sbci	r23, 0xFF	; 255
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	84 d2       	rcall	.+1288   	; 0x80c <Timer_SetValue>
 304:	02 e6       	ldi	r16, 0x62	; 98
 306:	10 e0       	ldi	r17, 0x00	; 0
 308:	0f 2e       	mov	r0, r31
 30a:	f7 e7       	ldi	r31, 0x77	; 119
 30c:	ef 2e       	mov	r14, r31
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ff 2e       	mov	r15, r31
 312:	f0 2d       	mov	r31, r0
 314:	f8 01       	movw	r30, r16
      	/*Loop through Tasks in the array and increment milestones*/
      uint8_t u8_counter=0;
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
      {
         if(gstr_arrayoftasks[u8_counter].Ptrtotask==NULL)
 316:	83 81       	ldd	r24, Z+3	; 0x03
 318:	94 81       	ldd	r25, Z+4	; 0x04
 31a:	89 2b       	or	r24, r25
 31c:	29 f0       	breq	.+10     	; 0x328 <TMU_Dispatch+0x72>
         {
            
         }
         else
         {
            gstr_arrayoftasks[u8_counter].delay_milistone++;
 31e:	85 81       	ldd	r24, Z+5	; 0x05
 320:	96 81       	ldd	r25, Z+6	; 0x06
 322:	01 96       	adiw	r24, 0x01	; 1
 324:	96 83       	std	Z+6, r25	; 0x06
 326:	85 83       	std	Z+5, r24	; 0x05
 328:	37 96       	adiw	r30, 0x07	; 7
      gu_timer_count1=0;
      
      Timer_SetValue(TMU_TIMER_ID,&u8_preloadtimer);
      	/*Loop through Tasks in the array and increment milestones*/
      uint8_t u8_counter=0;
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
 32a:	ee 15       	cp	r30, r14
 32c:	ff 05       	cpc	r31, r15
 32e:	99 f7       	brne	.-26     	; 0x316 <TMU_Dispatch+0x60>
         }
      }
      /* Loop through  array of structure and handle each one */
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
      {
         if(gstr_arrayoftasks[u8_counter].Ptrtotask==NULL)
 330:	d8 01       	movw	r26, r16
 332:	13 96       	adiw	r26, 0x03	; 3
 334:	ed 91       	ld	r30, X+
 336:	fc 91       	ld	r31, X
 338:	14 97       	sbiw	r26, 0x04	; 4
 33a:	30 97       	sbiw	r30, 0x00	; 0
 33c:	b9 f0       	breq	.+46     	; 0x36c <TMU_Dispatch+0xb6>
         {
            
         }
         else
         {
            if(gstr_arrayoftasks[u8_counter].delay_milistone>=gstr_arrayoftasks[u8_counter].delay)
 33e:	15 96       	adiw	r26, 0x05	; 5
 340:	2d 91       	ld	r18, X+
 342:	3c 91       	ld	r19, X
 344:	16 97       	sbiw	r26, 0x06	; 6
 346:	11 96       	adiw	r26, 0x01	; 1
 348:	8d 91       	ld	r24, X+
 34a:	9c 91       	ld	r25, X
 34c:	12 97       	sbiw	r26, 0x02	; 2
 34e:	28 17       	cp	r18, r24
 350:	39 07       	cpc	r19, r25
 352:	60 f0       	brcs	.+24     	; 0x36c <TMU_Dispatch+0xb6>
             {
                gstr_arrayoftasks[u8_counter].delay_milistone=0;
 354:	16 96       	adiw	r26, 0x06	; 6
 356:	1c 92       	st	X, r1
 358:	1e 92       	st	-X, r1
 35a:	15 97       	sbiw	r26, 0x05	; 5
                gstr_arrayoftasks[u8_counter].Ptrtotask();
 35c:	09 95       	icall
                if(gstr_arrayoftasks[u8_counter].perodicity==ONESHOT)
 35e:	f8 01       	movw	r30, r16
 360:	80 81       	ld	r24, Z
 362:	81 11       	cpse	r24, r1
 364:	03 c0       	rjmp	.+6      	; 0x36c <TMU_Dispatch+0xb6>
                {
                   TMU_Stop_Timer(gstr_arrayoftasks[u8_counter].Ptrtotask);
 366:	83 81       	ldd	r24, Z+3	; 0x03
 368:	94 81       	ldd	r25, Z+4	; 0x04
 36a:	6a df       	rcall	.-300    	; 0x240 <TMU_Stop_Timer>
 36c:	09 5f       	subi	r16, 0xF9	; 249
 36e:	1f 4f       	sbci	r17, 0xFF	; 255
         {
            gstr_arrayoftasks[u8_counter].delay_milistone++;
         }
      }
      /* Loop through  array of structure and handle each one */
      for(u8_counter=0;u8_counter<BUFFER_SIZE;u8_counter++)
 370:	0e 15       	cp	r16, r14
 372:	1f 05       	cpc	r17, r15
 374:	e9 f6       	brne	.-70     	; 0x330 <TMU_Dispatch+0x7a>
   else
   {
      
   }
   return status;
}
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	0f 90       	pop	r0
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	ef 90       	pop	r14
 386:	df 90       	pop	r13
 388:	cf 90       	pop	r12
 38a:	08 95       	ret

0000038c <func_call>:
   
   
}
void func_call(void)
{
   DIO_Toggle(GPIOA,PIN0);
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	80 e0       	ldi	r24, 0x00	; 0
 390:	e5 ce       	rjmp	.-566    	; 0x15c <DIO_Toggle>
 392:	08 95       	ret

00000394 <func_call1>:
}

void func_call1(void)
{
   DIO_Toggle(GPIOA,PIN1);
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	80 e0       	ldi	r24, 0x00	; 0
 398:	e1 ce       	rjmp	.-574    	; 0x15c <DIO_Toggle>
 39a:	08 95       	ret

0000039c <func_call2>:
}

void func_call2(void)
{
   DIO_Toggle(GPIOA,PIN2);
 39c:	64 e0       	ldi	r22, 0x04	; 4
 39e:	80 e0       	ldi	r24, 0x00	; 0
 3a0:	dd ce       	rjmp	.-582    	; 0x15c <DIO_Toggle>
 3a2:	08 95       	ret

000003a4 <main>:
extern Task_BlockType gstr_arrayoftasks[BUFFER_SIZE];



int main(void)
{
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	00 d0       	rcall	.+0      	; 0x3aa <main+0x6>
 3aa:	1f 92       	push	r1
 3ac:	cd b7       	in	r28, 0x3d	; 61
 3ae:	de b7       	in	r29, 0x3e	; 62
	sei();
 3b0:	78 94       	sei
   DIO_Cfg_s instanse={GPIOA,FULL_PORT,OUTPUT};
 3b2:	19 82       	std	Y+1, r1	; 0x01
 3b4:	8f ef       	ldi	r24, 0xFF	; 255
 3b6:	8a 83       	std	Y+2, r24	; 0x02
 3b8:	8b 83       	std	Y+3, r24	; 0x03
   DIO_init(&instanse);
 3ba:	ce 01       	movw	r24, r28
 3bc:	01 96       	adiw	r24, 0x01	; 1
 3be:	6d de       	rcall	.-806    	; 0x9a <DIO_init>
   TMU_Start_Timer(600,func_call3,PERIODIC);
   */

   /*test case2 (BUFFER_SIZE is 3)*/

   TMU_Init(&instans);
 3c0:	80 e6       	ldi	r24, 0x60	; 96
 3c2:	90 e0       	ldi	r25, 0x00	; 0
 3c4:	e9 de       	rcall	.-558    	; 0x198 <TMU_Init>
   TMU_Start_Timer(1000,func_call,PERIODIC);
 3c6:	41 e0       	ldi	r20, 0x01	; 1
 3c8:	66 ec       	ldi	r22, 0xC6	; 198
 3ca:	71 e0       	ldi	r23, 0x01	; 1
 3cc:	88 ee       	ldi	r24, 0xE8	; 232
 3ce:	93 e0       	ldi	r25, 0x03	; 3
 3d0:	1b df       	rcall	.-458    	; 0x208 <TMU_Start_Timer>
   TMU_Start_Timer(500,func_call1,PERIODIC);
 3d2:	41 e0       	ldi	r20, 0x01	; 1
 3d4:	6a ec       	ldi	r22, 0xCA	; 202
 3d6:	71 e0       	ldi	r23, 0x01	; 1
 3d8:	84 ef       	ldi	r24, 0xF4	; 244
 3da:	91 e0       	ldi	r25, 0x01	; 1
 3dc:	15 df       	rcall	.-470    	; 0x208 <TMU_Start_Timer>
   TMU_Start_Timer(300,func_call2,PERIODIC);
 3de:	41 e0       	ldi	r20, 0x01	; 1
 3e0:	6e ec       	ldi	r22, 0xCE	; 206
 3e2:	71 e0       	ldi	r23, 0x01	; 1
 3e4:	8c e2       	ldi	r24, 0x2C	; 44
 3e6:	91 e0       	ldi	r25, 0x01	; 1
   TMU_Stop_Timer(func_call2);
 3e8:	0f df       	rcall	.-482    	; 0x208 <TMU_Start_Timer>
 3ea:	8e ec       	ldi	r24, 0xCE	; 206
 3ec:	91 e0       	ldi	r25, 0x01	; 1
 3ee:	28 df       	rcall	.-432    	; 0x240 <TMU_Stop_Timer>
   */

 
   while(1)
   {
      TMU_Dispatch();
 3f0:	62 df       	rcall	.-316    	; 0x2b6 <TMU_Dispatch>
 3f2:	fe cf       	rjmp	.-4      	; 0x3f0 <main+0x4c>

000003f4 <Timer_Init>:
 3f4:	fc 01       	movw	r30, r24
	else
	{
		ERROR=E_NOK;
	}
	return ERROR;
}
 3f6:	89 2b       	or	r24, r25
 3f8:	09 f4       	brne	.+2      	; 0x3fc <Timer_Init+0x8>
 3fa:	64 c0       	rjmp	.+200    	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
 3fc:	30 81       	ld	r19, Z
 3fe:	83 2f       	mov	r24, r19
 400:	90 e0       	ldi	r25, 0x00	; 0
 402:	dc 01       	movw	r26, r24
 404:	a5 58       	subi	r26, 0x85	; 133
 406:	bf 4f       	sbci	r27, 0xFF	; 255
 408:	23 81       	ldd	r18, Z+3	; 0x03
 40a:	2c 93       	st	X, r18
 40c:	21 81       	ldd	r18, Z+1	; 0x01
 40e:	21 30       	cpi	r18, 0x01	; 1
 410:	09 f4       	brne	.+2      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 412:	46 c0       	rjmp	.+140    	; 0x4a0 <__LOCK_REGION_LENGTH__+0xa0>
 414:	20 f0       	brcs	.+8      	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 416:	22 30       	cpi	r18, 0x02	; 2
 418:	09 f4       	brne	.+2      	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 41a:	48 c0       	rjmp	.+144    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
 41c:	4c c0       	rjmp	.+152    	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 41e:	31 30       	cpi	r19, 0x01	; 1
 420:	91 f0       	breq	.+36     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
 422:	18 f0       	brcs	.+6      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
 424:	32 30       	cpi	r19, 0x02	; 2
 426:	31 f1       	breq	.+76     	; 0x474 <__LOCK_REGION_LENGTH__+0x74>
 428:	35 c0       	rjmp	.+106    	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 42a:	83 b7       	in	r24, 0x33	; 51
 42c:	88 7f       	andi	r24, 0xF8	; 248
 42e:	83 bf       	out	0x33, r24	; 51
 430:	82 81       	ldd	r24, Z+2	; 0x02
 432:	81 30       	cpi	r24, 0x01	; 1
 434:	21 f4       	brne	.+8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
 436:	89 b7       	in	r24, 0x39	; 57
 438:	81 60       	ori	r24, 0x01	; 1
 43a:	89 bf       	out	0x39, r24	; 57
 43c:	2b c0       	rjmp	.+86     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 43e:	89 b7       	in	r24, 0x39	; 57
 440:	8e 7f       	andi	r24, 0xFE	; 254
 442:	89 bf       	out	0x39, r24	; 57
 444:	27 c0       	rjmp	.+78     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 446:	8f b5       	in	r24, 0x2f	; 47
 448:	8d 7f       	andi	r24, 0xFD	; 253
 44a:	8f bd       	out	0x2f, r24	; 47
 44c:	8f b5       	in	r24, 0x2f	; 47
 44e:	8e 7f       	andi	r24, 0xFE	; 254
 450:	8f bd       	out	0x2f, r24	; 47
 452:	8e b5       	in	r24, 0x2e	; 46
 454:	87 7f       	andi	r24, 0xF7	; 247
 456:	8e bd       	out	0x2e, r24	; 46
 458:	8e b5       	in	r24, 0x2e	; 46
 45a:	8f 7e       	andi	r24, 0xEF	; 239
 45c:	8e bd       	out	0x2e, r24	; 46
 45e:	82 81       	ldd	r24, Z+2	; 0x02
 460:	81 11       	cpse	r24, r1
 462:	04 c0       	rjmp	.+8      	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 464:	89 b7       	in	r24, 0x39	; 57
 466:	8e 7f       	andi	r24, 0xFE	; 254
 468:	89 bf       	out	0x39, r24	; 57
 46a:	14 c0       	rjmp	.+40     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 46c:	89 b7       	in	r24, 0x39	; 57
 46e:	81 60       	ori	r24, 0x01	; 1
 470:	89 bf       	out	0x39, r24	; 57
 472:	10 c0       	rjmp	.+32     	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 474:	85 b5       	in	r24, 0x25	; 37
 476:	87 7f       	andi	r24, 0xF7	; 247
 478:	85 bd       	out	0x25, r24	; 37
 47a:	85 b5       	in	r24, 0x25	; 37
 47c:	8f 7b       	andi	r24, 0xBF	; 191
 47e:	85 bd       	out	0x25, r24	; 37
 480:	82 81       	ldd	r24, Z+2	; 0x02
 482:	81 11       	cpse	r24, r1
 484:	04 c0       	rjmp	.+8      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
 486:	89 b7       	in	r24, 0x39	; 57
 488:	8e 7f       	andi	r24, 0xFE	; 254
 48a:	89 bf       	out	0x39, r24	; 57
 48c:	03 c0       	rjmp	.+6      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
 48e:	89 b7       	in	r24, 0x39	; 57
 490:	81 60       	ori	r24, 0x01	; 1
 492:	89 bf       	out	0x39, r24	; 57
 494:	a0 81       	ld	r26, Z
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	a2 58       	subi	r26, 0x82	; 130
 49a:	bf 4f       	sbci	r27, 0xFF	; 255
 49c:	1c 92       	st	X, r1
 49e:	0b c0       	rjmp	.+22     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4a0:	dc 01       	movw	r26, r24
 4a2:	a2 58       	subi	r26, 0x82	; 130
 4a4:	bf 4f       	sbci	r27, 0xFF	; 255
 4a6:	21 e0       	ldi	r18, 0x01	; 1
 4a8:	2c 93       	st	X, r18
 4aa:	05 c0       	rjmp	.+10     	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
 4ac:	dc 01       	movw	r26, r24
 4ae:	a2 58       	subi	r26, 0x82	; 130
 4b0:	bf 4f       	sbci	r27, 0xFF	; 255
 4b2:	22 e0       	ldi	r18, 0x02	; 2
 4b4:	2c 93       	st	X, r18
 4b6:	e0 81       	ld	r30, Z
 4b8:	f0 e0       	ldi	r31, 0x00	; 0
 4ba:	e8 58       	subi	r30, 0x88	; 136
 4bc:	ff 4f       	sbci	r31, 0xFF	; 255
 4be:	81 e0       	ldi	r24, 0x01	; 1
 4c0:	80 83       	st	Z, r24
 4c2:	08 95       	ret
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	08 95       	ret

000004c8 <Timer_Start>:
 4c8:	81 30       	cpi	r24, 0x01	; 1
 4ca:	09 f4       	brne	.+2      	; 0x4ce <Timer_Start+0x6>
 4cc:	77 c0       	rjmp	.+238    	; 0x5bc <Timer_Start+0xf4>
 4ce:	20 f0       	brcs	.+8      	; 0x4d8 <Timer_Start+0x10>
 4d0:	82 30       	cpi	r24, 0x02	; 2
 4d2:	09 f4       	brne	.+2      	; 0x4d6 <Timer_Start+0xe>
 4d4:	e2 c0       	rjmp	.+452    	; 0x69a <Timer_Start+0x1d2>
 4d6:	4b c1       	rjmp	.+662    	; 0x76e <Timer_Start+0x2a6>
 4d8:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gsau8_initState>
 4dc:	81 30       	cpi	r24, 0x01	; 1
 4de:	09 f0       	breq	.+2      	; 0x4e2 <Timer_Start+0x1a>
 4e0:	48 c1       	rjmp	.+656    	; 0x772 <Timer_Start+0x2aa>
 4e2:	62 bf       	out	0x32, r22	; 50
 4e4:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <gsau8_mode>
 4e8:	81 30       	cpi	r24, 0x01	; 1
 4ea:	09 f4       	brne	.+2      	; 0x4ee <Timer_Start+0x26>
 4ec:	51 c0       	rjmp	.+162    	; 0x590 <Timer_Start+0xc8>
 4ee:	20 f0       	brcs	.+8      	; 0x4f8 <Timer_Start+0x30>
 4f0:	82 30       	cpi	r24, 0x02	; 2
 4f2:	09 f4       	brne	.+2      	; 0x4f6 <Timer_Start+0x2e>
 4f4:	58 c0       	rjmp	.+176    	; 0x5a6 <Timer_Start+0xde>
 4f6:	3f c1       	rjmp	.+638    	; 0x776 <Timer_Start+0x2ae>
 4f8:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <gsau8_preScaler>
 4fc:	84 30       	cpi	r24, 0x04	; 4
 4fe:	09 f1       	breq	.+66     	; 0x542 <Timer_Start+0x7a>
 500:	28 f4       	brcc	.+10     	; 0x50c <Timer_Start+0x44>
 502:	81 30       	cpi	r24, 0x01	; 1
 504:	41 f0       	breq	.+16     	; 0x516 <Timer_Start+0x4e>
 506:	82 30       	cpi	r24, 0x02	; 2
 508:	89 f0       	breq	.+34     	; 0x52c <Timer_Start+0x64>
 50a:	37 c1       	rjmp	.+622    	; 0x77a <Timer_Start+0x2b2>
 50c:	86 30       	cpi	r24, 0x06	; 6
 50e:	21 f1       	breq	.+72     	; 0x558 <Timer_Start+0x90>
 510:	87 30       	cpi	r24, 0x07	; 7
 512:	69 f1       	breq	.+90     	; 0x56e <Timer_Start+0xa6>
 514:	32 c1       	rjmp	.+612    	; 0x77a <Timer_Start+0x2b2>
 516:	83 b7       	in	r24, 0x33	; 51
 518:	8b 7f       	andi	r24, 0xFB	; 251
 51a:	83 bf       	out	0x33, r24	; 51
 51c:	83 b7       	in	r24, 0x33	; 51
 51e:	8d 7f       	andi	r24, 0xFD	; 253
 520:	83 bf       	out	0x33, r24	; 51
 522:	83 b7       	in	r24, 0x33	; 51
 524:	81 60       	ori	r24, 0x01	; 1
 526:	83 bf       	out	0x33, r24	; 51
 528:	81 e0       	ldi	r24, 0x01	; 1
 52a:	08 95       	ret
 52c:	83 b7       	in	r24, 0x33	; 51
 52e:	8b 7f       	andi	r24, 0xFB	; 251
 530:	83 bf       	out	0x33, r24	; 51
 532:	83 b7       	in	r24, 0x33	; 51
 534:	8e 7f       	andi	r24, 0xFE	; 254
 536:	83 bf       	out	0x33, r24	; 51
 538:	83 b7       	in	r24, 0x33	; 51
 53a:	82 60       	ori	r24, 0x02	; 2
 53c:	83 bf       	out	0x33, r24	; 51
 53e:	81 e0       	ldi	r24, 0x01	; 1
 540:	08 95       	ret
 542:	83 b7       	in	r24, 0x33	; 51
 544:	8b 7f       	andi	r24, 0xFB	; 251
 546:	83 bf       	out	0x33, r24	; 51
 548:	83 b7       	in	r24, 0x33	; 51
 54a:	82 60       	ori	r24, 0x02	; 2
 54c:	83 bf       	out	0x33, r24	; 51
 54e:	83 b7       	in	r24, 0x33	; 51
 550:	81 60       	ori	r24, 0x01	; 1
 552:	83 bf       	out	0x33, r24	; 51
 554:	81 e0       	ldi	r24, 0x01	; 1
 556:	08 95       	ret
 558:	83 b7       	in	r24, 0x33	; 51
 55a:	8e 7f       	andi	r24, 0xFE	; 254
 55c:	83 bf       	out	0x33, r24	; 51
 55e:	83 b7       	in	r24, 0x33	; 51
 560:	8d 7f       	andi	r24, 0xFD	; 253
 562:	83 bf       	out	0x33, r24	; 51
 564:	83 b7       	in	r24, 0x33	; 51
 566:	84 60       	ori	r24, 0x04	; 4
 568:	83 bf       	out	0x33, r24	; 51
 56a:	81 e0       	ldi	r24, 0x01	; 1
 56c:	08 95       	ret
 56e:	83 b7       	in	r24, 0x33	; 51
 570:	81 60       	ori	r24, 0x01	; 1
 572:	83 bf       	out	0x33, r24	; 51
 574:	83 b7       	in	r24, 0x33	; 51
 576:	8d 7f       	andi	r24, 0xFD	; 253
 578:	83 bf       	out	0x33, r24	; 51
 57a:	83 b7       	in	r24, 0x33	; 51
 57c:	84 60       	ori	r24, 0x04	; 4
 57e:	83 bf       	out	0x33, r24	; 51
 580:	83 b7       	in	r24, 0x33	; 51
 582:	8e 7f       	andi	r24, 0xFE	; 254
 584:	83 bf       	out	0x33, r24	; 51
 586:	83 b7       	in	r24, 0x33	; 51
 588:	82 60       	ori	r24, 0x02	; 2
 58a:	83 bf       	out	0x33, r24	; 51
 58c:	81 e0       	ldi	r24, 0x01	; 1
 58e:	08 95       	ret
 590:	83 b7       	in	r24, 0x33	; 51
 592:	84 60       	ori	r24, 0x04	; 4
 594:	83 bf       	out	0x33, r24	; 51
 596:	83 b7       	in	r24, 0x33	; 51
 598:	82 60       	ori	r24, 0x02	; 2
 59a:	83 bf       	out	0x33, r24	; 51
 59c:	83 b7       	in	r24, 0x33	; 51
 59e:	81 60       	ori	r24, 0x01	; 1
 5a0:	83 bf       	out	0x33, r24	; 51
 5a2:	81 e0       	ldi	r24, 0x01	; 1
 5a4:	08 95       	ret
 5a6:	83 b7       	in	r24, 0x33	; 51
 5a8:	84 60       	ori	r24, 0x04	; 4
 5aa:	83 bf       	out	0x33, r24	; 51
 5ac:	83 b7       	in	r24, 0x33	; 51
 5ae:	8e 7f       	andi	r24, 0xFE	; 254
 5b0:	83 bf       	out	0x33, r24	; 51
 5b2:	83 b7       	in	r24, 0x33	; 51
 5b4:	81 60       	ori	r24, 0x01	; 1
 5b6:	83 bf       	out	0x33, r24	; 51
 5b8:	81 e0       	ldi	r24, 0x01	; 1
 5ba:	08 95       	ret
 5bc:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gsau8_initState+0x1>
 5c0:	81 30       	cpi	r24, 0x01	; 1
 5c2:	09 f0       	breq	.+2      	; 0x5c6 <Timer_Start+0xfe>
 5c4:	dc c0       	rjmp	.+440    	; 0x77e <Timer_Start+0x2b6>
 5c6:	60 95       	com	r22
 5c8:	70 95       	com	r23
 5ca:	7d bd       	out	0x2d, r23	; 45
 5cc:	6c bd       	out	0x2c, r22	; 44
 5ce:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <gsau8_mode+0x1>
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	09 f4       	brne	.+2      	; 0x5d8 <Timer_Start+0x110>
 5d6:	4b c0       	rjmp	.+150    	; 0x66e <Timer_Start+0x1a6>
 5d8:	20 f0       	brcs	.+8      	; 0x5e2 <Timer_Start+0x11a>
 5da:	82 30       	cpi	r24, 0x02	; 2
 5dc:	09 f4       	brne	.+2      	; 0x5e0 <Timer_Start+0x118>
 5de:	52 c0       	rjmp	.+164    	; 0x684 <Timer_Start+0x1bc>
 5e0:	d0 c0       	rjmp	.+416    	; 0x782 <Timer_Start+0x2ba>
 5e2:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <gsau8_preScaler+0x1>
 5e6:	84 30       	cpi	r24, 0x04	; 4
 5e8:	09 f1       	breq	.+66     	; 0x62c <Timer_Start+0x164>
 5ea:	28 f4       	brcc	.+10     	; 0x5f6 <Timer_Start+0x12e>
 5ec:	81 30       	cpi	r24, 0x01	; 1
 5ee:	41 f0       	breq	.+16     	; 0x600 <Timer_Start+0x138>
 5f0:	82 30       	cpi	r24, 0x02	; 2
 5f2:	89 f0       	breq	.+34     	; 0x616 <Timer_Start+0x14e>
 5f4:	c8 c0       	rjmp	.+400    	; 0x786 <Timer_Start+0x2be>
 5f6:	86 30       	cpi	r24, 0x06	; 6
 5f8:	21 f1       	breq	.+72     	; 0x642 <Timer_Start+0x17a>
 5fa:	87 30       	cpi	r24, 0x07	; 7
 5fc:	69 f1       	breq	.+90     	; 0x658 <Timer_Start+0x190>
 5fe:	c3 c0       	rjmp	.+390    	; 0x786 <Timer_Start+0x2be>
 600:	8e b5       	in	r24, 0x2e	; 46
 602:	8b 7f       	andi	r24, 0xFB	; 251
 604:	8e bd       	out	0x2e, r24	; 46
 606:	8e b5       	in	r24, 0x2e	; 46
 608:	8d 7f       	andi	r24, 0xFD	; 253
 60a:	8e bd       	out	0x2e, r24	; 46
 60c:	8e b5       	in	r24, 0x2e	; 46
 60e:	81 60       	ori	r24, 0x01	; 1
 610:	8e bd       	out	0x2e, r24	; 46
 612:	81 e0       	ldi	r24, 0x01	; 1
 614:	08 95       	ret
 616:	8e b5       	in	r24, 0x2e	; 46
 618:	8b 7f       	andi	r24, 0xFB	; 251
 61a:	8e bd       	out	0x2e, r24	; 46
 61c:	8e b5       	in	r24, 0x2e	; 46
 61e:	8e 7f       	andi	r24, 0xFE	; 254
 620:	8e bd       	out	0x2e, r24	; 46
 622:	8e b5       	in	r24, 0x2e	; 46
 624:	82 60       	ori	r24, 0x02	; 2
 626:	8e bd       	out	0x2e, r24	; 46
 628:	81 e0       	ldi	r24, 0x01	; 1
 62a:	08 95       	ret
 62c:	8e b5       	in	r24, 0x2e	; 46
 62e:	8b 7f       	andi	r24, 0xFB	; 251
 630:	8e bd       	out	0x2e, r24	; 46
 632:	8e b5       	in	r24, 0x2e	; 46
 634:	81 60       	ori	r24, 0x01	; 1
 636:	8e bd       	out	0x2e, r24	; 46
 638:	8e b5       	in	r24, 0x2e	; 46
 63a:	82 60       	ori	r24, 0x02	; 2
 63c:	8e bd       	out	0x2e, r24	; 46
 63e:	81 e0       	ldi	r24, 0x01	; 1
 640:	08 95       	ret
 642:	8e b5       	in	r24, 0x2e	; 46
 644:	8d 7f       	andi	r24, 0xFD	; 253
 646:	8e bd       	out	0x2e, r24	; 46
 648:	8e b5       	in	r24, 0x2e	; 46
 64a:	8e 7f       	andi	r24, 0xFE	; 254
 64c:	8e bd       	out	0x2e, r24	; 46
 64e:	8e b5       	in	r24, 0x2e	; 46
 650:	84 60       	ori	r24, 0x04	; 4
 652:	8e bd       	out	0x2e, r24	; 46
 654:	81 e0       	ldi	r24, 0x01	; 1
 656:	08 95       	ret
 658:	8e b5       	in	r24, 0x2e	; 46
 65a:	8d 7f       	andi	r24, 0xFD	; 253
 65c:	8e bd       	out	0x2e, r24	; 46
 65e:	8e b5       	in	r24, 0x2e	; 46
 660:	81 60       	ori	r24, 0x01	; 1
 662:	8e bd       	out	0x2e, r24	; 46
 664:	8e b5       	in	r24, 0x2e	; 46
 666:	84 60       	ori	r24, 0x04	; 4
 668:	8e bd       	out	0x2e, r24	; 46
 66a:	81 e0       	ldi	r24, 0x01	; 1
 66c:	08 95       	ret
 66e:	8e b5       	in	r24, 0x2e	; 46
 670:	82 60       	ori	r24, 0x02	; 2
 672:	8e bd       	out	0x2e, r24	; 46
 674:	8e b5       	in	r24, 0x2e	; 46
 676:	81 60       	ori	r24, 0x01	; 1
 678:	8e bd       	out	0x2e, r24	; 46
 67a:	8e b5       	in	r24, 0x2e	; 46
 67c:	84 60       	ori	r24, 0x04	; 4
 67e:	8e bd       	out	0x2e, r24	; 46
 680:	81 e0       	ldi	r24, 0x01	; 1
 682:	08 95       	ret
 684:	8e b5       	in	r24, 0x2e	; 46
 686:	82 60       	ori	r24, 0x02	; 2
 688:	8e bd       	out	0x2e, r24	; 46
 68a:	8e b5       	in	r24, 0x2e	; 46
 68c:	84 60       	ori	r24, 0x04	; 4
 68e:	8e bd       	out	0x2e, r24	; 46
 690:	8e b5       	in	r24, 0x2e	; 46
 692:	8e 7f       	andi	r24, 0xFE	; 254
 694:	8e bd       	out	0x2e, r24	; 46
 696:	81 e0       	ldi	r24, 0x01	; 1
 698:	08 95       	ret
 69a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gsau8_initState+0x2>
 69e:	81 30       	cpi	r24, 0x01	; 1
 6a0:	09 f0       	breq	.+2      	; 0x6a4 <Timer_Start+0x1dc>
 6a2:	73 c0       	rjmp	.+230    	; 0x78a <Timer_Start+0x2c2>
 6a4:	60 95       	com	r22
 6a6:	64 bd       	out	0x24, r22	; 36
 6a8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <gsau8_mode+0x2>
 6ac:	88 23       	and	r24, r24
 6ae:	29 f0       	breq	.+10     	; 0x6ba <Timer_Start+0x1f2>
 6b0:	83 30       	cpi	r24, 0x03	; 3
 6b2:	08 f4       	brcc	.+2      	; 0x6b6 <Timer_Start+0x1ee>
 6b4:	6c c0       	rjmp	.+216    	; 0x78e <Timer_Start+0x2c6>
 6b6:	80 e0       	ldi	r24, 0x00	; 0
 6b8:	08 95       	ret
 6ba:	e0 91 7d 00 	lds	r30, 0x007D	; 0x80007d <gsau8_preScaler+0x2>
 6be:	8e 2f       	mov	r24, r30
 6c0:	90 e0       	ldi	r25, 0x00	; 0
 6c2:	fc 01       	movw	r30, r24
 6c4:	31 97       	sbiw	r30, 0x01	; 1
 6c6:	e7 30       	cpi	r30, 0x07	; 7
 6c8:	f1 05       	cpc	r31, r1
 6ca:	08 f0       	brcs	.+2      	; 0x6ce <Timer_Start+0x206>
 6cc:	62 c0       	rjmp	.+196    	; 0x792 <Timer_Start+0x2ca>
 6ce:	e6 5d       	subi	r30, 0xD6	; 214
 6d0:	ff 4f       	sbci	r31, 0xFF	; 255
 6d2:	da c0       	rjmp	.+436    	; 0x888 <__tablejump2__>
 6d4:	85 b5       	in	r24, 0x25	; 37
 6d6:	84 60       	ori	r24, 0x04	; 4
 6d8:	85 bd       	out	0x25, r24	; 37
 6da:	85 b5       	in	r24, 0x25	; 37
 6dc:	82 60       	ori	r24, 0x02	; 2
 6de:	85 bd       	out	0x25, r24	; 37
 6e0:	85 b5       	in	r24, 0x25	; 37
 6e2:	81 60       	ori	r24, 0x01	; 1
 6e4:	85 bd       	out	0x25, r24	; 37
 6e6:	81 e0       	ldi	r24, 0x01	; 1
 6e8:	08 95       	ret
 6ea:	85 b5       	in	r24, 0x25	; 37
 6ec:	8e 7f       	andi	r24, 0xFE	; 254
 6ee:	85 bd       	out	0x25, r24	; 37
 6f0:	85 b5       	in	r24, 0x25	; 37
 6f2:	8b 7f       	andi	r24, 0xFB	; 251
 6f4:	85 bd       	out	0x25, r24	; 37
 6f6:	85 b5       	in	r24, 0x25	; 37
 6f8:	82 60       	ori	r24, 0x02	; 2
 6fa:	85 bd       	out	0x25, r24	; 37
 6fc:	81 e0       	ldi	r24, 0x01	; 1
 6fe:	08 95       	ret
 700:	85 b5       	in	r24, 0x25	; 37
 702:	8b 7f       	andi	r24, 0xFB	; 251
 704:	85 bd       	out	0x25, r24	; 37
 706:	85 b5       	in	r24, 0x25	; 37
 708:	81 60       	ori	r24, 0x01	; 1
 70a:	85 bd       	out	0x25, r24	; 37
 70c:	85 b5       	in	r24, 0x25	; 37
 70e:	82 60       	ori	r24, 0x02	; 2
 710:	85 bd       	out	0x25, r24	; 37
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	08 95       	ret
 716:	85 b5       	in	r24, 0x25	; 37
 718:	84 60       	ori	r24, 0x04	; 4
 71a:	85 bd       	out	0x25, r24	; 37
 71c:	85 b5       	in	r24, 0x25	; 37
 71e:	8e 7f       	andi	r24, 0xFE	; 254
 720:	85 bd       	out	0x25, r24	; 37
 722:	85 b5       	in	r24, 0x25	; 37
 724:	8d 7f       	andi	r24, 0xFD	; 253
 726:	85 bd       	out	0x25, r24	; 37
 728:	81 e0       	ldi	r24, 0x01	; 1
 72a:	08 95       	ret
 72c:	85 b5       	in	r24, 0x25	; 37
 72e:	84 60       	ori	r24, 0x04	; 4
 730:	85 bd       	out	0x25, r24	; 37
 732:	85 b5       	in	r24, 0x25	; 37
 734:	81 60       	ori	r24, 0x01	; 1
 736:	85 bd       	out	0x25, r24	; 37
 738:	85 b5       	in	r24, 0x25	; 37
 73a:	8d 7f       	andi	r24, 0xFD	; 253
 73c:	85 bd       	out	0x25, r24	; 37
 73e:	81 e0       	ldi	r24, 0x01	; 1
 740:	08 95       	ret
 742:	85 b5       	in	r24, 0x25	; 37
 744:	84 60       	ori	r24, 0x04	; 4
 746:	85 bd       	out	0x25, r24	; 37
 748:	85 b5       	in	r24, 0x25	; 37
 74a:	82 60       	ori	r24, 0x02	; 2
 74c:	85 bd       	out	0x25, r24	; 37
 74e:	85 b5       	in	r24, 0x25	; 37
 750:	8e 7f       	andi	r24, 0xFE	; 254
 752:	85 bd       	out	0x25, r24	; 37
 754:	81 e0       	ldi	r24, 0x01	; 1
 756:	08 95       	ret
 758:	85 b5       	in	r24, 0x25	; 37
 75a:	84 60       	ori	r24, 0x04	; 4
 75c:	85 bd       	out	0x25, r24	; 37
 75e:	85 b5       	in	r24, 0x25	; 37
 760:	82 60       	ori	r24, 0x02	; 2
 762:	85 bd       	out	0x25, r24	; 37
 764:	85 b5       	in	r24, 0x25	; 37
 766:	81 60       	ori	r24, 0x01	; 1
 768:	85 bd       	out	0x25, r24	; 37
 76a:	81 e0       	ldi	r24, 0x01	; 1
 76c:	08 95       	ret
 76e:	80 e0       	ldi	r24, 0x00	; 0
 770:	08 95       	ret
 772:	80 e0       	ldi	r24, 0x00	; 0
 774:	08 95       	ret
 776:	80 e0       	ldi	r24, 0x00	; 0
 778:	08 95       	ret
 77a:	80 e0       	ldi	r24, 0x00	; 0
 77c:	08 95       	ret
 77e:	80 e0       	ldi	r24, 0x00	; 0
 780:	08 95       	ret
 782:	80 e0       	ldi	r24, 0x00	; 0
 784:	08 95       	ret
 786:	80 e0       	ldi	r24, 0x00	; 0
 788:	08 95       	ret
 78a:	80 e0       	ldi	r24, 0x00	; 0
 78c:	08 95       	ret
 78e:	81 e0       	ldi	r24, 0x01	; 1
 790:	08 95       	ret
 792:	80 e0       	ldi	r24, 0x00	; 0
 794:	08 95       	ret

00000796 <Timer_Stop>:
 796:	81 30       	cpi	r24, 0x01	; 1
 798:	99 f0       	breq	.+38     	; 0x7c0 <Timer_Stop+0x2a>
 79a:	18 f0       	brcs	.+6      	; 0x7a2 <Timer_Stop+0xc>
 79c:	82 30       	cpi	r24, 0x02	; 2
 79e:	f9 f0       	breq	.+62     	; 0x7de <Timer_Stop+0x48>
 7a0:	2d c0       	rjmp	.+90     	; 0x7fc <Timer_Stop+0x66>
 7a2:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <gsau8_initState>
 7a6:	81 30       	cpi	r24, 0x01	; 1
 7a8:	59 f5       	brne	.+86     	; 0x800 <Timer_Stop+0x6a>
 7aa:	83 b7       	in	r24, 0x33	; 51
 7ac:	84 60       	ori	r24, 0x04	; 4
 7ae:	83 bf       	out	0x33, r24	; 51
 7b0:	83 b7       	in	r24, 0x33	; 51
 7b2:	82 60       	ori	r24, 0x02	; 2
 7b4:	83 bf       	out	0x33, r24	; 51
 7b6:	83 b7       	in	r24, 0x33	; 51
 7b8:	81 60       	ori	r24, 0x01	; 1
 7ba:	83 bf       	out	0x33, r24	; 51
 7bc:	81 e0       	ldi	r24, 0x01	; 1
 7be:	08 95       	ret
 7c0:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <gsau8_initState+0x1>
 7c4:	81 30       	cpi	r24, 0x01	; 1
 7c6:	f1 f4       	brne	.+60     	; 0x804 <Timer_Stop+0x6e>
 7c8:	83 b7       	in	r24, 0x33	; 51
 7ca:	8b 7f       	andi	r24, 0xFB	; 251
 7cc:	83 bf       	out	0x33, r24	; 51
 7ce:	83 b7       	in	r24, 0x33	; 51
 7d0:	8d 7f       	andi	r24, 0xFD	; 253
 7d2:	83 bf       	out	0x33, r24	; 51
 7d4:	83 b7       	in	r24, 0x33	; 51
 7d6:	8e 7f       	andi	r24, 0xFE	; 254
 7d8:	83 bf       	out	0x33, r24	; 51
 7da:	81 e0       	ldi	r24, 0x01	; 1
 7dc:	08 95       	ret
 7de:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <gsau8_initState+0x2>
 7e2:	81 30       	cpi	r24, 0x01	; 1
 7e4:	89 f4       	brne	.+34     	; 0x808 <Timer_Stop+0x72>
 7e6:	85 b5       	in	r24, 0x25	; 37
 7e8:	8e 7f       	andi	r24, 0xFE	; 254
 7ea:	85 bd       	out	0x25, r24	; 37
 7ec:	85 b5       	in	r24, 0x25	; 37
 7ee:	8b 7f       	andi	r24, 0xFB	; 251
 7f0:	85 bd       	out	0x25, r24	; 37
 7f2:	85 b5       	in	r24, 0x25	; 37
 7f4:	8d 7f       	andi	r24, 0xFD	; 253
 7f6:	85 bd       	out	0x25, r24	; 37
 7f8:	81 e0       	ldi	r24, 0x01	; 1
 7fa:	08 95       	ret
 7fc:	80 e0       	ldi	r24, 0x00	; 0
 7fe:	08 95       	ret
 800:	80 e0       	ldi	r24, 0x00	; 0
 802:	08 95       	ret
 804:	80 e0       	ldi	r24, 0x00	; 0
 806:	08 95       	ret
 808:	80 e0       	ldi	r24, 0x00	; 0
 80a:	08 95       	ret

0000080c <Timer_SetValue>:


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
	switch(Timer_CH)
 80c:	81 30       	cpi	r24, 0x01	; 1
 80e:	49 f0       	breq	.+18     	; 0x822 <Timer_SetValue+0x16>
 810:	18 f0       	brcs	.+6      	; 0x818 <Timer_SetValue+0xc>
 812:	82 30       	cpi	r24, 0x02	; 2
 814:	69 f0       	breq	.+26     	; 0x830 <Timer_SetValue+0x24>
 816:	11 c0       	rjmp	.+34     	; 0x83a <Timer_SetValue+0x2e>
	{
		case TIMER_0:
		          TCNT0=*Data;
 818:	fb 01       	movw	r30, r22
 81a:	80 81       	ld	r24, Z
 81c:	82 bf       	out	0x32, r24	; 50
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 81e:	81 e0       	ldi	r24, 0x01	; 1
	switch(Timer_CH)
	{
		case TIMER_0:
		          TCNT0=*Data;
				  break; 
 820:	08 95       	ret
		case TIMER_1:
		           TCNT1=*Data;
 822:	fb 01       	movw	r30, r22
 824:	80 81       	ld	r24, Z
 826:	90 e0       	ldi	r25, 0x00	; 0
 828:	9d bd       	out	0x2d, r25	; 45
 82a:	8c bd       	out	0x2c, r24	; 44
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 82c:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_0:
		          TCNT0=*Data;
				  break; 
		case TIMER_1:
		           TCNT1=*Data;
		           break;
 82e:	08 95       	ret
		case TIMER_2:
		           TCNT2=*Data;
 830:	fb 01       	movw	r30, r22
 832:	80 81       	ld	r24, Z
 834:	84 bd       	out	0x24, r24	; 36
	return ERROR;
}


ERROR_STATUS Timer_SetValue(uint8_t Timer_CH, uint8_t* Data)
{ERROR_STATUS ERROR=E_OK;
 836:	81 e0       	ldi	r24, 0x01	; 1
		case TIMER_1:
		           TCNT1=*Data;
		           break;
		case TIMER_2:
		           TCNT2=*Data;
		           break;
 838:	08 95       	ret
		default:
		       ERROR=E_NOK;
 83a:	80 e0       	ldi	r24, 0x00	; 0
			   break;
	}
	
	return ERROR;
}
 83c:	08 95       	ret

0000083e <__vector_11>:


ISR(TIMER0_OVF_vect)
{
 83e:	1f 92       	push	r1
 840:	0f 92       	push	r0
 842:	0f b6       	in	r0, 0x3f	; 63
 844:	0f 92       	push	r0
 846:	11 24       	eor	r1, r1
 848:	8f 93       	push	r24
 84a:	9f 93       	push	r25
 84c:	af 93       	push	r26
 84e:	bf 93       	push	r27
   gu_timer_count1++;
 850:	80 91 81 00 	lds	r24, 0x0081	; 0x800081 <gu_timer_count1>
 854:	90 91 82 00 	lds	r25, 0x0082	; 0x800082 <gu_timer_count1+0x1>
 858:	a0 91 83 00 	lds	r26, 0x0083	; 0x800083 <gu_timer_count1+0x2>
 85c:	b0 91 84 00 	lds	r27, 0x0084	; 0x800084 <gu_timer_count1+0x3>
 860:	01 96       	adiw	r24, 0x01	; 1
 862:	a1 1d       	adc	r26, r1
 864:	b1 1d       	adc	r27, r1
 866:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <gu_timer_count1>
 86a:	90 93 82 00 	sts	0x0082, r25	; 0x800082 <gu_timer_count1+0x1>
 86e:	a0 93 83 00 	sts	0x0083, r26	; 0x800083 <gu_timer_count1+0x2>
 872:	b0 93 84 00 	sts	0x0084, r27	; 0x800084 <gu_timer_count1+0x3>
 876:	bf 91       	pop	r27
 878:	af 91       	pop	r26
 87a:	9f 91       	pop	r25
 87c:	8f 91       	pop	r24
 87e:	0f 90       	pop	r0
 880:	0f be       	out	0x3f, r0	; 63
 882:	0f 90       	pop	r0
 884:	1f 90       	pop	r1
 886:	18 95       	reti

00000888 <__tablejump2__>:
 888:	ee 0f       	add	r30, r30
 88a:	ff 1f       	adc	r31, r31
 88c:	05 90       	lpm	r0, Z+
 88e:	f4 91       	lpm	r31, Z
 890:	e0 2d       	mov	r30, r0
 892:	09 94       	ijmp

00000894 <_exit>:
 894:	f8 94       	cli

00000896 <__stop_program>:
 896:	ff cf       	rjmp	.-2      	; 0x896 <__stop_program>
